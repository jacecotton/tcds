@use "sass:list";
@use "sass:map";
@use "sass:string";
@use "layout.json";

.max-width {
  margin-left: auto !important;
  margin-right: auto !important;
  width: min(100% - (var(--tcds-site-outer-gutter) * 2), var(--tcds-max-width, var(--tcds-site-container-max-width))) !important;
}

.flex {
  display: flex !important;

  &:not(.flex--no-wrap) {
    flex-wrap: wrap !important;
  }
}

.flex--column {
  flex-direction: column !important;
}

.flex-1 {
  flex: 1 !important;
}

.flex-1-0 {
  flex: 1 0 !important;
}

.flex-0-1 {
  flex: 0 1 !important;
}

@each $breakpoint, $value in layout.$breakpoints {
  @media (--above-#{$breakpoint}) {
    .flex--row\@above\:#{$breakpoint} {
      flex-direction: row !important;
    }

    .flex--column\@above\:#{$breakpoint} {
      flex-direction: column !important;
    }

    .flex-1\@above\:#{$breakpoint} {
      flex: 1 !important;
    }

    .flex-1-0\@above\:#{$breakpoint} {
      flex: 1 0 !important;
    }

    .flex-0-1\@above\:#{$breakpoint} {
      flex: 0 1 !important;
    }
  }
}

.grid {
  --grid-columns: 12;
  --grid-column-repeat: var(--grid-columns);

  display: grid !important;
  grid-template-columns: repeat(var(--grid-column-repeat), 1fr) !important;

  @each $breakpoint, $value in layout.$breakpoints {
    $index: list.index(layout.$breakpoints, ($breakpoint $value));

    $previous-breakpoint: if($index - 1 > 0,
      list.nth(list.nth(layout.$breakpoints, $index - 1), 1),
      null
    );

    @media (--above-#{$breakpoint}) {
      --grid-columns-above-#{$breakpoint}: #{
        if($previous-breakpoint == null,
          var(--grid-columns),
          var(--grid-columns-above-#{$previous-breakpoint})
        )
      };

      --grid-column-repeat: var(--grid-columns-above-#{$breakpoint});
    }
  }
}

.column-full {
  grid-column: 1 / -1 !important;
}

@for $column from 1 through 12 {
  .column-#{$column} {
    grid-column: span $column !important;
  }
}

@each $breakpoint, $value in layout.$breakpoints {
  @media (--above-#{$breakpoint}) {
    .column-full\@above\:#{$breakpoint} {
      grid-column: 1 / -1 !important;
    }

    @for $column from 1 through 12 {
      .column-#{$column}\@above\:#{$breakpoint} {
        grid-column: span $column !important;
      }
    }
  }
}

.float-left {
  margin: 0 auto var(--tcds-micro-s) !important;

  @media (--above-m) {
    float: left !important;
    margin: 0 var(--tcds-micro-s) var(--tcds-micro-s) 0 !important;
  }
}

.float-right {
  margin: 0 auto var(--tcds-micro-s) !important;

  @media (--above-m) {
    float: right !important;
    margin: 0  0 var(--tcds-micro-s) var(--tcds-micro-s) !important;
  }
}

@each $breakpoint, $value in layout.$breakpoints {
  @media (--below-#{$breakpoint}) {
    .hide\@below\:#{$breakpoint} {
      display: none !important;
    }
  }

  @media (--above-#{$breakpoint}) {
    .hide\@above\:#{$breakpoint} {
      display: none !important;
    }
  }
}

@each $size, $value in map.get(layout.$sizes, "micro") {
  $value: $value * map.get(layout.$base-units, "micro");

  .gap-#{$size} {
    gap: $value !important;
  }

  .row-gap-#{$size} {
    row-gap: $value !important;
  }

  .column-gap-#{$size} {
    column-gap: $value !important;
  }

  .margin-bottom-#{$size} {
    margin-bottom: $value !important;
  }
}

.justify-space-between {
  justify-content: space-between !important;
}

.justify-start,
.justify-left {
  justify-content: start !important;
}

.justify-end,
.justify-right {
  justify-content: end !important;
}

.justify-center {
  justify-content: center !important;
  justify-items: center !important;
}

.align-center {
  align-items: center !important;
}

.align-start,
.align-top {
  align-items: start !important;
}

.align-end,
.align-bottom {
  align-items: end !important;
}

.visually-hidden {
  clip: rect(0, 0, 0, 0);
  clip-path: inset(50%);
  height: 1px;
  width: 1px;
  position: absolute;
}
