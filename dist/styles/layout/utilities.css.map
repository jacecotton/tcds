{"version":3,"sources":["layout/utilities.scss","layout/_mixins.scss","layout/_variables.scss"],"names":[],"mappings":"AAEA,WC2BE,aAAA,CACA,uBAAA,CACA,gBAAA,CDzBF,KACE,YAAA,CACA,kBAAA,CAGF,QACE,YAAA,CACA,qBAAA,CAGF,uBAEE,cAAA,CAIA,QACE,MAFY,CACd,QACE,MAFY,CACd,QACE,MAFY,CACd,QACE,MAFY,CACd,QACE,MAFY,CACd,QACE,MAFY,CACd,QACE,MAFY,CACd,QACE,MAFY,CACd,QACE,MAFY,CACd,SACE,OAFY,CACd,SACE,OAFY,CACd,SACE,OAFY,CAMhB,WACE,eAAA,CAIA,yBAEI,qBACE,MAFY,CACd,qBACE,MAFY,CACd,qBACE,MAFY,CACd,qBACE,MAFY,CACd,qBACE,MAFY,CACd,qBACE,MAFY,CACd,qBACE,MAFY,CACd,qBACE,MAFY,CACd,qBACE,MAFY,CACd,sBACE,OAFY,CACd,sBACE,OAFY,CACd,sBACE,OAFY,CAMhB,wBACE,eAAA,CAAA,CARJ,yBAEI,sBACE,MAFY,CACd,sBACE,MAFY,CACd,sBACE,MAFY,CACd,sBACE,MAFY,CACd,sBACE,MAFY,CACd,sBACE,MAFY,CACd,sBACE,MAFY,CACd,sBACE,MAFY,CACd,sBACE,MAFY,CACd,uBACE,OAFY,CACd,uBACE,OAFY,CACd,uBACE,OAFY,CAMhB,yBACE,eAAA,CAAA,CARJ,0BAEI,qBACE,MAFY,CACd,qBACE,MAFY,CACd,qBACE,MAFY,CACd,qBACE,MAFY,CACd,qBACE,MAFY,CACd,qBACE,MAFY,CACd,qBACE,MAFY,CACd,qBACE,MAFY,CACd,qBACE,MAFY,CACd,sBACE,OAFY,CACd,sBACE,OAFY,CACd,sBACE,OAFY,CAMhB,wBACE,eAAA,CAAA,CARJ,0BAEI,uBACE,MAFY,CACd,uBACE,MAFY,CACd,uBACE,MAFY,CACd,uBACE,MAFY,CACd,uBACE,MAFY,CACd,uBACE,MAFY,CACd,uBACE,MAFY,CACd,uBACE,MAFY,CACd,uBACE,MAFY,CACd,wBACE,OAFY,CACd,wBACE,OAFY,CACd,wBACE,OAFY,CAMhB,0BACE,eAAA,CAAA,CAKN,uBACE,6BAAA,CAGF,6BAEE,qBAAA,CAGF,4BAEE,mBAAA,CAGF,gBACE,sBAAA,CAGF,cACE,kBAAA,CAGF,wBAEE,iBAAA,CAGF,yBAEE,eAAA,CAGF,YACE,kBAAA,CCxEE,yBDuEJ,YAII,UAAA,CACA,oBAAA,CAAA,CAIJ,aACE,kBAAA,CCjFE,yBDgFJ,aAII,WAAA,CACA,oBAAA,CAAA,CAKF,aACE,OE5DK,CF+DP,iBACE,WEhEK,CFmEP,oBACE,cEpEK,CF2DP,WACE,OE5DK,CF+DP,eACE,WEhEK,CFmEP,kBACE,cEpEK,CF2DP,YACE,QE5DK,CF+DP,gBACE,YEhEK,CFmEP,mBACE,eEpEK,CF2DP,WACE,QE5DK,CF+DP,eACE,YEhEK,CFmEP,kBACE,eEpEK,CF2DP,aACE,QE5DK,CF+DP,iBACE,YEhEK,CFmEP,oBACE,eEpEK,CDnBL,yBD6FA,kBACE,uBAAA,CAAA,CC1GF,yBD+GA,kBACE,uBAAA,CAAA,CCpGF,yBD6FA,mBACE,uBAAA,CAAA,CC1GF,yBD+GA,mBACE,uBAAA,CAAA,CCpGF,0BD6FA,kBACE,uBAAA,CAAA,CC1GF,0BD+GA,kBACE,uBAAA,CAAA,CCpGF,0BD6FA,oBACE,uBAAA,CAAA,CC1GF,0BD+GA,oBACE,uBAAA,CAAA,CAKN,oBACE,oBAAA,CACA,UAAA,CACA,WAAA","file":"utilities.css","sourcesContent":["@use \"../_all\" as *;\n\n.max-width {\n  @include max-width;\n}\n\n.row {\n  display: flex;\n  flex-direction: row;\n}\n\n.column {\n  display: flex;\n  flex-direction: column;\n}\n\n.row-wrap,\n.column-wrap {\n  flex-wrap: wrap;\n}\n\n@for $flex from 1 through 12 {\n  .flex-#{$flex} {\n    flex: $flex;\n  }\n}\n\n.flex-full {\n  flex-basis: 100%;\n}\n\n@each $breakpoint-name, $breakpoint-value in $breakpoints {\n  @media (min-width: #{$breakpoint-value}) {\n    @for $flex from 1 through 12 {\n      .above-#{$breakpoint-name}\\:flex-#{$flex} {\n        flex: $flex;\n      }\n    }\n\n    .above-#{$breakpoint-name}\\:flex-full {\n      flex-basis: 100%;\n    }\n  }\n}\n\n.justify-space-between {\n  justify-content: space-between;\n}\n\n.justify-start,\n.justify-left {\n  justify-content: start;\n}\n\n.justify-end,\n.justify-right {\n  justify-content: end;\n}\n\n.justify-center {\n  justify-content: center;\n}\n\n.align-center {\n  align-items: center;\n}\n\n.align-start,\n.align-top {\n  align-items: start;\n}\n\n.align-end,\n.align-bottom {\n  align-items: end;\n}\n\n.float-left {\n  margin: 0 auto space(\"loose\");\n\n  @include breakpoint-above(\"small\") {\n    float: left;\n    margin: 0 space(\"loose\") space(\"loose\") 0;\n  }\n}\n\n.float-right {\n  margin: 0 auto space(\"loose\");\n\n  @include breakpoint-above(\"small\") {\n    float: right;\n    margin: 0 0 space(\"loose\") space(\"loose\");\n  }\n}\n\n@each $space, $value in $spaces {\n  .gap-#{$space} {\n    gap: $value;\n  }\n\n  .row-gap-#{$space} {\n    row-gap: $value;\n  }\n\n  .column-gap-#{$space} {\n    column-gap: $value;\n  }\n}\n\n@each $breakpoint, $value in $breakpoints {\n  @include breakpoint-below($breakpoint) {\n    .hide-below-#{$breakpoint} {\n      display: none !important;\n    }\n  }\n\n  @include breakpoint-above($breakpoint) {\n    .hide-above-#{$breakpoint} {\n      display: none !important;\n    }\n  }\n}\n\n.is-self-responsive {\n  container-type: width;\n  width: 100%;\n  height: 100%;\n}","@use \"sass:map\";\n@use \"_variables\" as *;\n@use \"_functions\" as *;\n\n@mixin breakpoint-above($breakpoint) {\n  @if map.has-key($breakpoints, $breakpoint) {\n    @media (min-width: breakpoint($breakpoint)) {\n      @content;\n    }\n  } @else {\n    @media (min-width: #{$breakpoint}) {\n      @content;\n    }\n  }\n}\n\n@mixin breakpoint-below($breakpoint) {\n  @if map.has-key($breakpoints, $breakpoint) {\n    @media (max-width: breakpoint($breakpoint)) {\n      @content;\n    }\n  } @else {\n    @media (max-width: #{$breakpoint}) {\n      @content;\n    }\n  }\n}\n\n@mixin max-width {\n  margin: 0 auto;\n  width: calc(100% - space(\"x-loose\"));\n  max-width: breakpoint(\"x-large\");\n}","/**\n * Layout design tokens. Each token and its value is stored in a map. Note\n * that each map has a corresponding getter function (see _functions.scss) for\n * easier access. For example, rather than `map.get($sizes, \"small\")`,\n * you can simply use `size(\"small\")`.\n */\n\n/**\n * The global base unit. All layout-related measurements should be an even\n * multiple of this unit.\n */\n$base-unit: 4px;\n\n/**\n * Semantic sizes on a scale of x-small to x-large. Useful for setting widths\n * and heights at the component/element level (for instance to keep size\n * modifiers consistent across components). Not as useful for measurements of\n * larger-scale layouts, which should be flexible and use relative units rather\n * than absolute/static. For fixed, larger-scale layout measurements to use at\n * the macro level, consider breakpoint tokens instead.\n *\n * See: size()\n */\n$sizes: (\n  \"x-small\": $base-unit * 6,\n  \"small\":   $base-unit * 8,\n  \"medium\":  $base-unit * 10,\n  \"large\":   $base-unit * 12,\n  \"x-large\": $base-unit * 14,\n);\n\n/**\n * Semantic spaces on a scale of x-tight to x-loose. Useful for setting margin,\n * padding, gap, etc.\n *\n * See: space()\n */\n$spaces: (\n  \"x-tight\": $base-unit * 1,\n  \"tight\":   $base-unit * 2,\n  \"normal\":  $base-unit * 4,\n  \"loose\":   $base-unit * 6,\n  \"x-loose\": $base-unit * 8,\n);\n\n/**\n * Breakpoints on a scale of small to x-large. Useful for global coordination\n * between elements. However, it is generally recommended to set breakpoints on\n * a case-by-case basis according to works best for the element in question.\n * These are only intended to be optional starting points for when the exact\n * breakpoint doesn't necessarily matter.\n *\n * See: breakpoint()\n */\n$breakpoints: (\n  \"small\": 640px,\n  \"medium\": 768px,\n  \"large\": 1024px,\n  \"x-large\": 1280px,\n);\n\n/**\n * Layers for setting z-index. This is to help manage z-indices from a single\n * source of truth, to ensure elements layer over each other properly, and avoid\n * arbitrary escalation of z-index values. When a new entry is added here,\n * consider its relationship to the other elements listed and adjust each as\n * needed. For instance, a modal should be on top of a sticky header.\n *\n * Note that negative values, 1, and 2 are reserved. They are allowed to be used\n * anywhere and do not need to be systematized, as they are often only useful\n * for setting z-indices relative to the stacking context of the element in\n * question.\n *\n * See: layer()\n */\n$layers: (\n  \"modal\": 4,\n  \"sticky-header\": 3,\n);"]}