{"version":3,"sources":["@tcds/components/card.scss","@tcds/base/_mixins.scss","@tcds/components/<no source>","@tcds/typography/_mixins.scss"],"names":[],"mappings":"AASA,MACE,gBAAA,CAAA,YAAA,CACA,iBAAA,CAEA,yBAAA,CAMA,6BACE,oBAAA,CAAA,yBAAA,CACA,uBAAA,CAAA,4BAAA,CACA,kCACE,CAoBF,8BADF,2BAXE,iDAAA,CAAA,sDAAA,CACA,iBAAA,CAAA,sBAAA,CACA,gCACE,CACF,yBAAA,CAAA,CAiBF,kBArBE,iDAAA,CAAA,sDAAA,CACA,iBAAA,CAAA,sBAAA,CACA,gCACE,CACF,yBAAA,CAqBF,eACE,2CAAA,CACA,yBAAA,CACA,2DAAA,CACA,kCAAA,CAEA,gCAAA,CACA,4BAAA,CACA,mBAAA,CACA,qBAAA,CACA,sBAAA,CAGF,aACE,mCAAA,CAIA,8BADF,oCAEI,wBAAA,CAAA,CAIJ,4BACE,wBAAA,CAGF,sBACE,sCAAA,CAGF,qBACE,yBAAA,CAGF,mBC9DA,yBAAA,CDkEA,aE/FF,eAAA,kBFgGI,AEhGJ,eFgGI,CACA,iCAAA,CAFF,0CE/FF,eAAA,iBFiGI,CAFF,iCE/FF,eAAA,iBFiGI,CAEA,iBACE,aAAA,CACA,UAAA,CACA,WAAA,CACA,0CAAA,CAAA,uCAAA,CACA,yBAAA,CAAA,sBAAA,CACA,eAAA,CAIJ,YE7GF,eAAA,kBF8GI,AE9GJ,cF8GI,CACA,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,qDAAA,CACA,aAAA,CACA,yCAAA,CACA,iGACE,CATJ,yCE7GF,eAAA,iBFsHM,CATJ,gCE7GF,eAAA,iBFsHM,CAIJ,aG7GA,iBAAA,CAGE,+EAAA,CAMA,gBAAA,CHsGA,eAAA,CACA,aAAA,CACA,oBAAA,CACA,mBAAA,CAEA,mBACE,YAAA,CAGF,2BACE,UAAA,CACA,iBAAA,CACA,KAAA,CACA,OAAA,CACA,QAAA,CACA,MAAA,CAWJ,eGzIA,cAAA,CAGE,4EAAA,CAUA,eAAA,CH8HA,mBAAA,CAEA,iBACE,iBAAA,CACA,aAAA,CACA,YAAA,CAIJ,cACE,YAAA,CACA,eAAA,CACA,UAAA","file":"card.css","sourcesContent":["@use \"../_all\" as *;\n\n/**\n * 1. Define the \"small\" size of the media area (e.g. image). By default, the\n *    media area will be 1/4th the width of the card. However, this variable\n *    will both be used as the minimum width of the media element for all cards,\n *    and the maximum width for cards with the `compact` modifier.\n */\n\n.Card {\n  display: grid;\n  position: relative;\n  \n  --card-media-small: 220px; // 1\n\n  /**\n   * Vertical orientation styles (applies by default, unless the \"horizontal\"\n   * modifier is explicitly set).\n   */\n  &:not(#{&}--horizontal) {\n    grid-template-columns: 1fr;\n    grid-template-rows: auto auto;\n    grid-template-areas:\n      \"media\"\n      \"body\";\n  }\n\n  /**\n   * Horizontal orientation styles.\n   */\n  @mixin horizontal-card {\n    grid-template-columns: var(--card-media-width, 1fr) 3fr;\n    grid-template-rows: 1fr;\n    grid-template-areas:\n      \"media body\";\n    --card-body-divider: none;\n  }\n\n  /**\n   * Apply horizontal orientation styles when the \"vertical\" modifier is not\n   * explicitly set and the card's outer container is sufficiently wide.\n   */\n  &:not(#{&}--vertical) {\n    @container (min-width: 600px) {\n      @include horizontal-card;\n    }\n  }\n\n  /**\n   * Also apply horizontal orientation styles when the \"horizontal\" modifier is\n   * explicitly set.\n   */\n  &--horizontal {\n    @include horizontal-card;\n  }\n\n  &--compact {\n    --card-media-width: var(--card-media-small);\n    --card-body-padding: #{space(\"loose\")};\n    --card-title-font-size: #{font-size(\"medium\", $responsive: true)};\n    --card-content-font-size: #{font-size(\"small\", $responsive: true)};\n\n    --button-background: transparent;\n    --button-text-color: #{theme-color(\"secondary\")};\n    --button-padding: 0;\n    --button-height: auto;\n    --button-overlay: none;\n  }\n\n  &--no-bg {\n    --card-body-background: transparent;\n  }\n\n  &--no-bg:not(#{&}--horizontal) {\n    @container (max-width: 599px) {\n      --card-body-padding-x: 0;\n    }\n  }\n\n  &--no-bg#{&}--vertical {\n    --card-body-padding-x: 0;\n  }\n\n  &--accent-divider {\n    --card-body-divider: #{space(\"tight\")} solid #{theme-color(\"primary\")};\n  }\n\n  &--contain-media {\n    --card-media-fit: contain;\n  }\n\n  &:focus-within {\n    @include focus-style;\n  }\n\n  &__media {\n    grid-area: media;\n    min-width: var(--card-media-small);\n\n    > img {\n      display: block;\n      width: 100%;\n      height: 100%;\n      object-fit: var(--card-media-fit, cover);\n      object-position: center;\n      overflow: hidden;\n    }\n  }\n\n  &__body {\n    grid-area: body;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    background-color: var(--card-body-background, #{color(\"gray\", \"0\")});\n    color: color(\"gray\", \"400\");\n    border-top: var(--card-body-divider, none);\n    padding:\n      var(--card-body-padding, #{space(\"x-loose\")})\n      var(--card-body-padding-x, var(--card-body-padding, #{space(\"x-loose\")}));\n  }\n\n  &__title {\n    @include font-size(\"medium-plus\", $custom-property: \"--card-title-font-size\");\n    font-weight: font-weight(\"semibold\");\n    color: inherit;\n    text-decoration: none;\n    margin-bottom: space(\"tight\", \"em\");\n\n    &:focus {\n      outline: none;\n    }\n\n    &[href]::before {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n    }\n  }\n\n  /**\n   * 1. Make other links in the card content clickable by raising it in the\n   *    stacking context.\n   * 2. Because the whole card surface is clickable, links within the card\n   *    should have a larger click target.\n   */\n\n  &__content {\n    @include font-size(\"medium\", $custom-property: \"--card-content-font-size\");\n    margin-bottom: space(\"loose\", \"em\");\n    \n    a {\n      position: relative; // 1\n      margin: -.5em; // 2\n      padding: .5em; // 2\n    }\n  }\n\n  &__footer {\n    display: flex;\n    margin-top: auto;\n    width: 100%;\n  }\n}","@use \"../color/_all\" as *;\n\n/**\n * Generic mixins.\n */\n\n/**\n * For visually hiding an element while keeping it accessible to screen readers.\n * This mixin corresponds with the `.visually-hidden` utility class (see\n * _utilities), but can be applied to any element.\n */\n@mixin visually-hidden {\n  clip: rect(0, 0, 0, 0);\n  clip-path: inset(50%);\n  height: 1px;\n  width: 1px;\n  position: absolute;\n}\n\n/**\n * For adding a consistent focus style to elements.\n */\n@mixin focus-style($inverted: false) {\n  $color: theme-color(\"link\");\n\n  @if $inverted == true {\n    $color: color(\"yellow\", \"100\");\n  }\n\n  outline: 3px solid $color;\n}\n\n/**\n * A mixin for targeting specific browsers based off of feature or media\n * queries.\n *\n * Except in extreme circumstances, the use of this mixin is NOT recommended.\n * Instead, opt for progressive enhancement with Feature Queries, or some\n * graceful degradation strategy. This mixin is only intended to be used to\n * address specific rendering quirks or known vendor bugs that cannot be\n * addressed any other way. It should not be used to build parallel stylesheets\n * for different browsers.\n *\n * Be warned that many of these browser-sniffing techniques are unstable, as\n * they typically test for the (lack of) support of certain features that may\n * end up becoming supported in the future. In this event, the queries should be\n * changed to include the version supported, e.g. from \"safari\" to \"lte safari\n * 15\" (less-than or equal-to Safari 15).\n *\n * If this happens, conditional styles should be reassessed. If a feature\n * becomes supported in a new version of a browser, detecting that browser at\n * all may no longer be necessary. If it is still necessary, a different browser\n * detection technique will need to be added under the original query.\n *\n * Also note that in most cases, browser targeting is done with the `@supports`\n * query, which is not supported in any version of IE, Edge < 12, Firefox <= 21,\n * Chrome <= 27, Safari <= 8, or iOS Safari <= 8.4. IE 11 is detected through\n * separate means. See https://caniuse.com/css-featurequeries.\n *\n * @param {string} $browser - The name of the browser or specific query.\n *   Available options are:\n *   - \"firefox\"\n *   - \"not firefox\"\n *   - \"chromium\" (Chrome, modern Edge, etc.)\n *   - \"not chromium\"\n *   - \"sarari\" or \"any safari\" (macOS and iOS)\n *   - \"ios safari\" or \"mobile safari\"\n *   - \"macos safari\" or \"desktop safari\"\n *   - \"not safari\"\n *   - \"ie 11\" or \"gte ie 10\"\n *   - \"edge not chromium\" or \"edgehtml\" or \"lt edge 79\"\n */\n\n@mixin target-browser($browser) {\n  // https://www.bram.us/2021/06/23/css-at-supports-rules-to-target-only-firefox-safari-chromium/\n\n  $query: \"\";\n\n  /**\n   * Detects Firefox (Android Firefox not tested).\n   *\n   * Status: Stable\n   * Explanation: `-moz-appearance` will remain in all Firefox browsers for\n   *   backwards compatibility, going back to Firefox 2.\n   * Works: From Firefox 22 (start of Feature Query support).\n   */\n  @if $browser == \"firefox\" {\n    $query: \"-moz-appearance: none\";\n  }\n\n  /**\n   * Detects any browser that is not Firefox (Android Firefox not tested).\n   *\n   * Status: Stable\n   * Explanation: Refer to \"firefox\" comment block.\n   * Works: Refer to \"firefox\" comment block.\n   */\n  @if $browser == \"not firefox\" {\n    $query: \"not (-moz-appearance: none)\";\n  }\n\n  /**\n   * Detects Chromium-based browsers (Chrome, Edge, Brave, etc.) by testing for\n   * CSS Containment (Chromium and Firefox only), and then excluding Firefox.\n   *\n   * Status: Unstable\n   * Explanation: Safari may eventually support CSS Containment.\n   * Implication: This query may eventually target Safari.\n   * Works: From Chrome 52 and Edge 79 (start of CSS Containment support),\n   *   Firefox 22, macOS Safari 9, and iOS Safari 9 (start of Feature Query\n   *   support).\n   * Monitor: https://caniuse.com/css-containment\n   */\n  @if $browser == \"chromium\" {\n    $query: \"(contain: paint) and (not (-moz-appearance: none))\"\n  }\n\n  /**\n   * Detects non-Chromium-based browsers by testing for iOS Safari, macOS\n   * Safari, and Firefox.\n   *\n   * Status: Unstable\n   * Explanation: Reliably detects Firefox and iOS Safari only; does not\n   *   reliably detect macOS Safari (refer to respective comment blocks).\n   * Implication: This query may eventually target Chromium-based browsers.\n   * Works: From iOS Safari 9, macOS Safari 9, Firefox 22, Edge 12, Chrome 28\n   *   (start of Feature Query support).\n   * Monitor: https://caniuse.com/css-nth-child-of\n   */\n  @if $browser == \"not chromium\" {\n    $query: \"(-webkit-touch-callout: none) or (selector(:nth-child(1 of x))) or (-moz-appearance: none)\";\n  }\n\n  /**\n   * Detects macOS Safari or iOS Safari.\n   *\n   * Status: Unstable\n   * Explanation: Reliably detects iOS Safari only (refer to respective comment\n   *   block); other browsers may one day support `nth-child` \"of\" clause.\n   * Implication: This query may eventually target non-Safari browsers.\n   * Works: From iOS Safari 9, macOS Safari 9, Firefox 22, Edge 12, Chrome 28\n   *   (start of Feature Query support).\n   * Monitor: https://caniuse.com/css-nth-child-of\n   */\n  @if $browser == \"safari\" or $browser == \"any safari\" {\n    $query: \"(-webkit-touch-callout: none) or (selector(:nth-child(1 of x)))\";\n  }\n\n  /**\n   * Detects iOS Safari.\n   *\n   * Status: Stable\n   * Explanation: `-webkit-touch-callout` will remain in all iOS Safari browsers\n   *   for backwards compatibility, going back to Safari 3.2.\n   * Works: From iOS Safari 9 (start of Feature Query support).\n   */\n  @if $browser == \"ios safari\" or $browser == \"mobile safari\" {\n    $query: \"-webkit-touch-callout: none\";\n  }\n\n  /**\n   * Detects macOS Safari.\n   *\n   * Status: Unstable.\n   * Explanation: Other browsers may one day support `nth-child` \"of\" clause.\n   * Implication: This query may one day target non-macOS Safari browsers.\n   * Works: From macOS Safari 9 (start of \"of\" clause support), iOS Safari 9,\n   *   Edge 12, Chrome 28, Firefox 22 (start of Feature Query support).\n   * Monitor: https://caniuse.com/css-nth-child-of\n   */\n  @if $browser == \"macos safari\" or $browser == \"desktop safari\" {\n    $query: \"selector(:nth-child(1 of x))\";\n  }\n\n  /**\n   * Detects non-Safari (macOS or iOS) browsers.\n   *\n   * Status: Unstable\n   * Explanation: Safari may eventually support CSS Containment.\n   * Implication: This query may eventually target Safari.\n   * Works: From macoS Safari 9, iOS Safari 9 (start of Feature Query support),\n   *   Chrome 52, Edge 59, Firefox 69 (start of CSS Containment support).\n   * Monitor: https://caniuse.com/css-containment\n   */\n  @if $browser == \"not safari\" {\n    $query: \"contain: paint\";\n  }\n\n  /**\n   * Detects non-Chromium Edge, i.e. EdgeHTML or Edge before version 79.\n   *\n   * Status: Stable\n   * Explanation: `-ms-ime-align` is supported exclusively in pre-Chromium Edge.\n   *   See https://docs.microsoft.com/en-us/previous-versions/dn433242(v=vs.85)\n   */\n  @if $browser == \"edge not chromium\" or $browser == \"edgehtml\" or $browser == \"lt edge 79\" {\n    $query: \"-ms-ime-align: auto\";\n  }\n\n  /**\n   * Detects IE 10 and 11 by testing whether the user agent's vendor-specific\n   * contrast mode is either \"none\" or \"active\".\n   *\n   * Status: Stable\n   * Works: From IE 10 up to IE 11.\n   */\n  @if $browser == \"ie 11\" or $browser == \"gte ie 10\" {\n    $query: \"all and (-ms-high-contrast: none), (-ms-high-contrast: active)\";\n  }\n\n  /**\n   * Construct the final query.\n   */\n  @if $browser != \"ie 11\" and $browser != \"gte ie 10\" {\n    @supports (#{$query}) {\n      @content;\n    }\n  } @else if $browser == \"ie 11\" or $browser == \"gte ie 10\" {\n    @media #{$query} {\n      @content;\n    }\n  }\n}",null,"@use \"sass:string\";\n@use \"_variables\" as *;\n@use \"_functions\" as *;\n\n/**\n * A mixin for generating responsive font sizes and automatically providing the\n * appropriate line-height based on the font-size.\n *\n * 1. A static fallback for browsers that do not support `clamp`.\n * 2. Set a tight line-height for font sizes xx-large through medium-plus.\n * 3. Set a normal line-height for font sizes medium through x-small.\n */\n@mixin font-size($font-size, $responsive: true, $custom-property: false) {\n  font-size: font-size($font-size); // 1\n\n  @if $custom-property {\n    font-size: var(#{string.unquote($custom-property)}, #{font-size($font-size, $responsive: true)});\n  } @else {\n    font-size: font-size($font-size, $responsive: true);\n  }\n\n  @if index((\"xx-large\", \"x-large\", \"large\", \"medium-plus\"), $font-size) {\n    line-height: line-height(\"tight\"); // 2\n  }\n\n  @if index((\"medium\", \"small\", \"x-small\"), $font-size) {\n    line-height: line-height(\"normal\"); // 3\n  }\n} "]}