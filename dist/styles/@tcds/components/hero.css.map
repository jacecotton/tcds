{"version":3,"sources":["@tcds/components/hero.scss","@tcds/animation/_mixins.scss","@tcds/typography/_mixins.scss"],"names":[],"mappings":"AAkBA,MAKE,YAAA,CACA,kBAAA,CACA,qBAAA,CACA,0BAAA,CACA,sBAAA,CACA,kJAAA,CAMA,gFAAA,CACA,+CAAA,CACA,kDAAA,CACA,SAAA,CACA,iBAAA,CACA,UAAA,CAEA,8BACE,4BAAA,CACA,8BAAA,CAGF,mBACE,yBAAA,CC9BF,8CDqCE,gBACE,2BAAA,CAAA,CASJ,cACE,UAAA,CACA,iBAAA,CACA,KAAA,CACA,OAAA,CACA,QAAA,CACA,MAAA,CACA,UAAA,CACA,yBAAA,CAGF,gBE9DA,gBAAA,CAKE,6CAAA,CAIA,gBAAA,CFuDA,eAAA,CACA,QAAA,CAGF,eEpEA,iBAAA,CAKE,8CAAA,CAIA,gBAAA,CF6DA,SAAA","file":"hero.css","sourcesContent":["@use \"../_all\" as *;\n\n/**\n * 1. Make padding add to the box's total dimensions, rather than pushing\n *    content inwards (as in `box-sizing: border-box`).\n * 2. Set the minimum height to 100% of the viewport height, minus top and\n *    bottom padding (so the total height isn't 100% plus padding). Then, if\n *    defined, subtract the height of the site's header, which will be added as\n *    top padding in [4].\n * 4. Set the top padding to the height of the site header (to be pulled up by\n *    the same amount in [5]), plus whatever additional top padding is\n *    specified.\n * 5. Pull the hero up with a negative top margin, by the height of the site\n *    header (so that the header overlays the hero).\n * 6. If the hero rotates between multiple background images, create a proper\n *    \"crossfade\" effect with a \"darken\" blend mode.\n */\n\n.Hero {\n  $hero-padding-bottom: 3rem;\n  $hero-padding-top: 3rem;\n  $hero-base-height: 65vh;\n\n  display: flex;\n  align-items: center;\n  background-size: cover;\n  background-position: center;\n  box-sizing: content-box; // 1\n  min-height: calc(\n    var(--hero-base-height, #{$hero-base-height})\n    - var(--hero-padding-top, #{$hero-padding-top})\n    - var(--hero-padding-bottom, #{$hero-padding-bottom})\n    - var(--site-header-height, 0px)\n  ); // 3\n  padding-top: calc(var(--site-header-height, 0px) + var(--hero-padding-top, #{$hero-padding-top})); // 4\n  padding-bottom: var(--hero-padding-bottom, #{$hero-padding-bottom});\n  margin-top: calc(var(--site-header-height, 0px) * -1); // 5\n  z-index: 1;\n  position: relative;\n  color: #fff;\n\n  &[data-background-images] {\n    background-blend-mode: darken; // 6\n    transition: background-image 3s;\n  }\n\n  &--full-height {\n    --hero-base-height: 100vh;\n  }\n  \n  /**\n   * Only allow parallax if reduced motion preference is not set.\n   */\n  @include motion-ok {\n    &--parallax {\n      background-attachment: fixed;\n    }\n  }\n\n  /**\n   * Increase contrast with the background image(s) by adding a darkened\n   * overlay.\n   */\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: -1;\n    background: color(\"shade\", \"200\");\n  }\n\n  &__headline {\n    @include font-size(\"xx-large\");\n    font-weight: font-weight(\"semibold\");\n    margin: 0;\n  }\n\n  &__tagline {\n    @include font-size(\"medium-plus\");\n    width: 50%;\n  }\n}","/**\n * Mixins related to motion (animation or transitions).\n */\n\n/**\n * A media query for detecting whether a user prefers reduced motion.\n */\n@mixin reduced-motion() {\n  @media (prefers-reduced-motion: reduce) {\n    @content;\n  }\n}\n\n/**\n * A media query for detecting whether the user has not set a motion preference.\n */\n@mixin motion-ok() {\n  @media (prefers-reduced-motion: no-preference) {\n    @content;\n  }\n}","@use \"sass:string\";\n@use \"_variables\" as *;\n@use \"_functions\" as *;\n\n/**\n * A mixin for generating responsive font sizes and automatically providing the\n * appropriate line-height based on the font-size.\n *\n * 1. A static fallback for browsers that do not support `clamp`.\n * 2. Set a tight line-height for font sizes xx-large through medium-plus.\n * 3. Set a normal line-height for font sizes medium through x-small.\n */\n@mixin font-size($font-size, $responsive: true, $custom-property: false) {\n  font-size: font-size($font-size); // 1\n\n  @if $custom-property {\n    font-size: var(#{string.unquote($custom-property)}, #{font-size($font-size, $responsive: true)});\n  } @else {\n    font-size: font-size($font-size, $responsive: true);\n  }\n\n  @if index((\"xx-large\", \"x-large\", \"large\", \"medium-plus\"), $font-size) {\n    line-height: line-height(\"tight\"); // 2\n  }\n\n  @if index((\"medium\", \"small\", \"x-small\"), $font-size) {\n    line-height: line-height(\"normal\"); // 3\n  }\n} "]}