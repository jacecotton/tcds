{"version":3,"sources":["@tcds/base/base.scss","@tcds/animation/_mixins.scss","@tcds/base/base.css"],"names":[],"mappings":"AAYA,EACE,WAAA,WACA,OAAA,EACA,QAAA,EAEA,QAAA,SAEE,WAAA,WCFF,8CDUF,KAEI,gBAAA,QAWJ,KACE,QAAA,MACA,MAAA,KACA,WAAA,OACA,OAAA,KACA,yBAAA,KAAA,sBAAA,KAAA,iBAAA,KAOF,EEkQA,OACA,MACA,OACA,QACA,SFhQE,aAAA,aAQF,MEuQA,OALA,OACA,OACA,IACA,IAGA,MAFA,MF9PE,UAAA,KACA,OAAA,KACA,eAAA,OAOF,SACE,QAAA","file":"base.css","sourcesContent":["@use \"../_all\" as *;\n\n/**\n * Styles included here are commonly found in \"reset\", \"normalize\", or\n * \"preflight\" files. However, the purpose of this file is strictly to set some\n * better defaults as a starting point. It is not to eliminate or even normalize\n * differences between browsers.\n *\n * 1. Better default box model (padding while now no longer add to an element's\n *    dimensions, but instead push content inwards).\n */\n\n* {\n  box-sizing: border-box; // 1\n  margin: 0;\n  padding: 0;\n\n  &::before,\n  &::after {\n    box-sizing: border-box;\n  }\n}\n\n/**\n * 1. If \"reduced motion\" preference is not set, animate scrolling to anchors to\n *    better orient users as to the location and direction of a scroll change.\n */\nhtml {\n  @include motion-ok {\n    scroll-behavior: smooth; // 1\n  }\n}\n\n/**\n * 1. Ensure against horizontal scrolling on smaller screens.\n * 2. `position: sticky` won't work on an element with an ancestor (like `html,\n *    body`) that has an `overflow` property but not a `height`.\n * 3. Do not adjust font size on orientation change of mobile devices (i.e.,\n *    disable font zooming when changing to landscape mode).\n */\nbody {\n  display: block; // 1\n  width: 100%; // 1\n  overflow-x: hidden; // 1\n  height: 100%; // 2\n  text-size-adjust: 100%; // 3\n}\n\n/**\n * 1. Provide a more \"native\" feel on touch devices by removing the double-tap\n *    delay of single-tap-only elements.\n */\na,\nbutton,\ninput,\nselect,\nsummary,\ntextarea {\n  touch-action: manipulation; // 1\n}\n\n/**\n * 1. Prevent media elements from expanding beyond or stretching out the parent\n *    element.\n * 2. Remove default white space after inline elements.\n */\naudio,\ncanvas,\niframe,\nimg,\nsvg,\nvideo,\nbutton,\ntable {\n  max-width: 100%; // 1\n  height: auto;\n  vertical-align: middle; // 2\n}\n\n/**\n * 1. Make the `[hidden]` attribute stronger so it overrides the `display`\n *    property of the elements it's used on.\n */\n[hidden] {\n  display: none !important;\n}","/**\n * Mixins related to motion (animation or transitions).\n */\n\n/**\n * A media query for detecting whether a user prefers reduced motion.\n */\n@mixin reduced-motion() {\n  @media (prefers-reduced-motion: reduce) {\n    @content;\n  }\n}\n\n/**\n * A media query for detecting whether the user has not set a motion preference.\n */\n@mixin motion-ok() {\n  @media (prefers-reduced-motion: no-preference) {\n    @content;\n  }\n}","/**\n * A generic getter function for maps. This is not simply to be a shortcut/alias\n * for `map.get`, but to standardize error handling and prevent null\n * compilations.\n */\n/**\n * Generic mixins.\n */\n/**\n * For visually hiding an element while keeping it accessible to screen readers.\n * This mixin corresponds with the `.visually-hidden` utility class (see\n * _utilities), but can be applied to any element.\n */\n/**\n * A mixin for targeting specific browsers based off of feature or media\n * queries.\n *\n * Except in extreme circumstances, the use of this mixin is NOT recommended.\n * Instead, opt for progressive enhancement with Feature Queries, or some\n * graceful degradation strategy. This mixin is only intended to be used to\n * address specific rendering quirks or known vendor bugs that cannot be\n * addressed any other way. It should not be used to build parallel stylesheets\n * for different browsers.\n *\n * Be warned that many of these browser-sniffing techniques are unstable, as\n * they typically test for the (lack of) support of certain features that may\n * end up becoming supported in the future. In this event, the queries should be\n * changed to include the version supported, e.g. from \"safari\" to \"lte safari\n * 15\" (less-than or equal-to Safari 15).\n *\n * If this happens, conditional styles should be reassessed. If a feature\n * becomes supported in a new version of a browser, detecting that browser at\n * all may no longer be necessary. If it is still necessary, a different browser\n * detection technique will need to be added under the original query.\n *\n * Also note that in most cases, browser targeting is done with the `@supports`\n * query, which is not supported in any version of IE, Edge < 12, Firefox <= 21,\n * Chrome <= 27, Safari <= 8, or iOS Safari <= 8.4. IE 11 is detected through\n * separate means. See https://caniuse.com/css-featurequeries.\n *\n * @param {string} $browser - The name of the browser or specific query.\n *   Available options are:\n *   - \"firefox\"\n *   - \"not firefox\"\n *   - \"chromium\" (Chrome, modern Edge, etc.)\n *   - \"not chromium\"\n *   - \"sarari\" or \"any safari\" (macOS and iOS)\n *   - \"ios safari\" or \"mobile safari\"\n *   - \"macos safari\" or \"desktop safari\"\n *   - \"not safari\"\n *   - \"ie 11\" or \"gte ie 10\"\n *   - \"edge not chromium\" or \"edgehtml\" or \"lt edge 79\"\n */\n/**\n * Typography design tokens. Each token and its value is stored in a map. Note\n * that each map has a corresponding getter function (see _functions.scss) for\n * easier access. For example, rather than `map.get($font-stacks, \"default\")`,\n * you can simply use `font-stack(\"default\")`.\n */\n/**\n * Semantic font stacks. These are first stored as configuration variables for\n * easier overriding on import (downstream use).\n *\n * See: font-stack()\n */\n/**\n * Semantic font sizes, on a scale of x-small to xx-large. In addition to a\n * getter function, there is also a mixin for generating responsive font sizes\n * based on the static values here (as well as automatically providing the\n * appropriate line-height).\n *\n * See: font-size()\n */\n/**\n * Font weights. These are stored as tokens in the event of a typeface change,\n * since exact numeric values depend on the type. For example, semibold can mean\n * 500 or 600 depending on the font.\n *\n * See: font-weight()\n */\n/**\n * Semantic line heights, on a scale of x-tight to x-loose. Generally, larger\n * text should have a tighter line height, medium text should have a looser line\n * height, and smaller text should have a medium line height.\n *\n * See: line-height()\n */\n/**\n * Getter functions for variable maps.\n */\n/**\n * A getter function for the `$font-stacks` map (see _variables).\n */\n/**\n * A getter function for the `$font-sizes` map (see _variables).\n */\n/**\n * A getter function for the `$font-weights` map (see _variables).\n */\n/**\n * A getter function for the `$line-heights` map (see _variables).\n */\n/**\n * A mixin for generating responsive font sizes and automatically providing the\n * appropriate line-height based on the font-size.\n *\n * 1. A static fallback for browsers that do not support `clamp`.\n * 2. Only generate a responsive font size if it has not been disabled, and if\n *    the font size is not x-small or small (which are already at their own\n *    minimums.\n * 3. Font sizes will flex with the screen width (1%), with constraints of 66%\n *    (minimum) and 100% (maximum) of the given font-size.\n * 4. Set a tight line-height for font sizes xx-large through medium-plus.\n * 5. Set a normal line-height for font sizes medium through x-small.\n */\n/**\n * Animation design tokens. Each token and its value is stored in a map. Note\n * that each map has a corresponding getter function (see _functions.scss) for\n * easier access. For example, rather than `map.get($animation-properties,\n * \"productive\")`, you can simply use `animation(\"productive\")`.\n */\n/**\n * Easing and timing variables for animations and transitions.\n *\n * \"Productive\" motion is fast and snappy, and is best used for productive user\n * tasks, or elements that only need subtle animation.\n *\n * \"Expressive\" motion is slower and smoother, and is best used to draw a user's\n * attention to a different portion of the screen from where they clicked or\n * where their focus may be.\n *\n * See: animation()\n */\n/**\n * Utility functions for animations and transitions.\n */\n/**\n * A getter function for the `$animation-properties` map (see _variables).\n */\n/**\n * Mixins related to motion (animation or transitions).\n */\n/**\n * A media query for detecting whether a user prefers reduced motion.\n */\n/**\n * A media query for detecting whether the user has not set a motion preference.\n */\n/**\n * Layout design tokens. Each token and its value is stored in a map. Note\n * that each map has a corresponding getter function (see _functions.scss) for\n * easier access. For example, rather than `map.get($sizes, \"small\")`,\n * you can simply use `size(\"small\")`.\n */\n/**\n * The global base unit. All layout-related measurements should be an even\n * multiple of this unit.\n */\n/**\n * Semantic sizes on a scale of x-small to x-large. Useful for setting widths\n * and heights at the component/element level (for instance to keep size\n * modifiers consistent across components). Not as useful for measurements of\n * larger-scale layouts, which should be flexible and use relative units rather\n * than absolute/static. For fixed, larger-scale layout measurements to use at\n * the macro level, consider breakpoint tokens instead.\n *\n * See: size()\n */\n/**\n * Semantic spaces on a scale of x-tight to x-loose. Useful for setting margin,\n * padding, gap, etc.\n *\n * See: space()\n */\n/**\n * Breakpoints on a scale of small to x-large. Useful for global coordination\n * between elements. However, it is generally recommended to set breakpoints on\n * a case-by-case basis according to works best for the element in question.\n * These are only intended to be optional starting points for when the exact\n * breakpoint doesn't necessarily matter.\n *\n * See: breakpoint()\n */\n/**\n * Layers for setting z-index. This is to help manage z-indices from a single\n * source of truth, to ensure elements layer over each other properly, and avoid\n * arbitrary escalation of z-index values. When a new entry is added here,\n * consider its relationship to the other elements listed and adjust each as\n * needed. For instance, a modal should be on top of a sticky header.\n *\n * Note that negative values, 1, and 2 are reserved. They are allowed to be used\n * anywhere and do not need to be systematized, as they are often only useful\n * for setting z-indices relative to the stacking context of the element in\n * question.\n *\n * See: layer()\n */\n/**\n * Utility functions for the layout system.\n */\n/**\n * A generic getter function for layout maps. Checks that `$unit` is of a\n * supported type (px, rem, or em), then converts the px value stored in the map\n * to rem or em if specified.\n */\n/**\n * A getter function for the `$sizes` map (see _variables).\n */\n/**\n * A getter function for the `$spaces` map (see _variables).\n */\n/**\n * A getter function for the `$breakpoints` map (see _variables).\n */\n/**\n * A getter function for the `$layers` map (see _variables).\n */\n/**\n * Color design tokens. Each token and its value is stored in a map. Note that\n * each map has a corresponding getter function (see _functions.scss) for easier\n * access. For example, rather than `map.get($colors, \"red\")`, you can simply\n * use `color(\"red\")`.\n */\n/**\n * Basic color dictionary. Grades indicate lightness (perceptual luminosity), on\n * a scale of 0 (lightest) to 500 (darkest), at increments of 100.\n *\n * See: color()\n */\n/**\n * Interface aliases are keywords used to reference colors according to the role\n * they serve in a user interface.\n *\n * See: interface-color()\n */\n/**\n * Theme aliases are keywords used to reference colors according to the role\n * they serve in the theme and brand scheme. Default colors are set here, but\n * they are expected to be overridden on a site-by-site basis according to that\n * site's branding.\n *\n * See: theme-color()\n */\n/**\n * Utility functions for the color system.\n */\n/**\n * A generic getter function for color maps. First checks that `$color-token` is\n * a valid key for `$color-map`, then that `$grade` is a valid grade for\n * `$color-token`.\n */\n/**\n * A getter function for the `$colors` map (see _variables).\n */\n/**\n * A getter function for the `$interface-colors` map (see _variables).\n */\n/**\n * A getter function for the `$theme-colors` map (see _variables).\n */\n/**\n * Styles included here are commonly found in \"reset\", \"normalize\", or\n * \"preflight\" files. However, the purpose of this file is strictly to set some\n * better defaults as a starting point. It is not to eliminate or even normalize\n * differences between browsers.\n *\n * 1. Better default box model (padding while now no longer add to an element's\n *    dimensions, but instead push content inwards).\n */\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n*::before, *::after {\n  box-sizing: border-box;\n}\n\n/**\n * 1. If \"reduced motion\" preference is not set, animate scrolling to anchors to\n *    better orient users as to the location and direction of a scroll change.\n */\n@media (prefers-reduced-motion: no-preference) {\n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n/**\n * 1. Ensure against horizontal scrolling on smaller screens.\n * 2. `position: sticky` won't work on an element with an ancestor (like `html,\n *    body`) that has an `overflow` property but not a `height`.\n * 3. Do not adjust font size on orientation change of mobile devices (i.e.,\n *    disable font zooming when changing to landscape mode).\n */\nbody {\n  display: block;\n  width: 100%;\n  overflow-x: hidden;\n  height: 100%;\n  text-size-adjust: 100%;\n}\n\n/**\n * 1. Provide a more \"native\" feel on touch devices by removing the double-tap\n *    delay of single-tap-only elements.\n */\na,\nbutton,\ninput,\nselect,\nsummary,\ntextarea {\n  touch-action: manipulation;\n}\n\n/**\n * 1. Prevent media elements from expanding beyond or stretching out the parent\n *    element.\n * 2. Remove default white space after inline elements.\n */\naudio,\ncanvas,\niframe,\nimg,\nsvg,\nvideo,\nbutton,\ntable {\n  max-width: 100%;\n  height: auto;\n  vertical-align: middle;\n}\n\n/**\n * 1. Make the `[hidden]` attribute stronger so it overrides the `display`\n *    property of the elements it's used on.\n */\n[hidden] {\n  display: none !important;\n}"]}