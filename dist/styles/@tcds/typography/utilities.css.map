{"version":3,"sources":["@tcds/typography/utilities.scss","@tcds/typography/_variables.scss","@tcds/typography/_mixins.scss"],"names":[],"mappings":"AAGA,aACE,iBAAA,CAIA,YACE,eCyCW,CD1Cb,aACE,eCyCW,CD1Cb,eACE,eCyCW,CD1Cb,WACE,eCyCW,CDpCb,cEDA,gBAAA,CAKE,gBAAA,CAQA,eAAA,CFZF,YEDA,iBAAA,CAKE,iBAAA,CAQA,eAAA,CFZF,aEDA,cAAA,CAKE,yCAAA,CAQA,eAAA,CFZF,kBEDA,iBAAA,CAKE,8CAAA,CAIA,gBAAA,CFRF,YEDA,gBAAA,CAKE,2CAAA,CAIA,gBAAA,CFRF,cEDA,cAAA,CAKE,2CAAA,CAIA,gBAAA,CFRF,eEDA,gBAAA,CAKE,6CAAA,CAIA,gBAAA,CFFF,cACE,sCCHU,CDEZ,eACE,sCCHU,CDEZ,WACE,sCCHU,CDEZ,SACE,sCCHU","file":"utilities.css","sourcesContent":["@use \"../typography/_variables\" as *;\n@use \"../typography/_mixins\" as *;\n\n.text-center {\n  text-align: center;\n}\n\n@each $token, $value in $font-weights {\n  .text-#{$token} {\n    font-weight: $value;\n  }\n}\n\n@each $token, $value in $font-sizes {\n  .text-#{$token} {\n    @include font-size($token);\n  }\n}\n\n@each $token, $value in $font-stacks {\n  .font-#{$token} {\n    font-family: $value;\n  }\n}","/**\n * Typography design tokens. Each token and its value is stored in a map. Note\n * that each map has a corresponding getter function (see _functions.scss) for\n * easier access. For example, rather than `map.get($font-stacks, \"default\")`,\n * you can simply use `font-stack(\"default\")`.\n */\n\n/**\n * Semantic font stacks. These are first stored as configuration variables for\n * easier overriding on import (downstream use).\n *\n * See: font-stack()\n */\n$theme-font-default: (Inter, system-ui, sans-serif) !default;\n$theme-font-headings: (Inter, system-ui, sans-serif) !default;\n$theme-font-copy: (Inter, system-ui, sans-serif) !default;\n$theme-font-ui: (Inter, system-ui, sans-serif) !default;\n\n$font-stacks: (\n  \"default\": $theme-font-default,\n  \"headings\": $theme-font-headings,\n  \"copy\": $theme-font-copy,\n  \"ui\": $theme-font-ui,\n);\n\n/**\n * Semantic font sizes, on a scale of x-small to xx-large. In addition to a\n * getter function, there is also a mixin for generating responsive font sizes\n * based on the static values here (as well as automatically providing the\n * appropriate line-height).\n *\n * See: font-size()\n */\n$font-sizes: (\n  \"x-small\": .75rem,\n  \"small\": .875rem,\n  \"medium\": 1rem,\n  \"medium-plus\": 1.25rem,\n  \"large\": 1.5rem,\n  \"x-large\": 2rem,\n  \"xx-large\": 2.5rem,\n);\n\n/**\n * Font weights. These are stored as tokens in the event of a typeface change,\n * since exact numeric values depend on the type. For example, semibold can mean\n * 500 or 600 depending on the font.\n *\n * See: font-weight()\n */\n$font-weights: (\n  \"light\": 300,\n  \"normal\": 400,\n  \"semibold\": 600,\n  \"bold\": 700,\n);\n\n/**\n * Semantic line heights, on a scale of x-tight to x-loose. Generally, larger\n * text should have a tighter line height, medium text should have a looser line\n * height, and smaller text should have a medium line height.\n *\n * See: line-height()\n */\n$line-heights: (\n  \"x-tight\": 1,\n  \"tight\": 1.25,\n  \"normal\": 1.5,\n  \"loose\": 1.75,\n  \"x-loose\": 2,\n);","@use \"sass:string\";\n@use \"_variables\" as *;\n@use \"_functions\" as *;\n\n/**\n * A mixin for generating responsive font sizes and automatically providing the\n * appropriate line-height based on the font-size.\n *\n * 1. A static fallback for browsers that do not support `clamp`.\n * 2. Set a tight line-height for font sizes xx-large through medium-plus.\n * 3. Set a normal line-height for font sizes medium through x-small.\n */\n@mixin font-size($font-size, $responsive: true, $custom-property: false) {\n  font-size: font-size($font-size); // 1\n\n  @if $custom-property {\n    font-size: var(#{string.unquote($custom-property)}, #{font-size($font-size, $responsive: true)});\n  } @else {\n    font-size: font-size($font-size, $responsive: true);\n  }\n\n  @if index((\"xx-large\", \"x-large\", \"large\", \"medium-plus\"), $font-size) {\n    line-height: line-height(\"tight\"); // 2\n  }\n\n  @if index((\"medium\", \"small\", \"x-small\"), $font-size) {\n    line-height: line-height(\"normal\"); // 3\n  }\n} "]}