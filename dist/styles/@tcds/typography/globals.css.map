{"version":3,"sources":["@tcds/typography/globals.scss","@tcds/typography/globals.css","@tcds/typography/_mixins.scss"],"names":[],"mappings":"AAEA,KACE,MAAA,QACA,YAAA,KAAA,CAAA,SAAA,CAAA,WACA,UAAA,KCsRF,IAAK,IAAK,IAAK,IAAK,IAAK,IDlQzB,0BAEE,YAAA,KAAA,CAAA,SAAA,CAAA,WCqQF,IAAK,IAAK,IAAK,IAAK,IDlQpB,uBAEE,OAAA,KAAA,EAGF,oBCkQA,oBDhQE,WAAA,OAGF,oBACE,WAAA,KCqQF,IDlQA,GE3BE,UAAA,OAGE,UAAA,oCAQA,YAAA,KFmBF,YAAA,IACA,eAAA,QACA,OAAA,EAAA,EAAA,KCuQF,IDpQA,GEnCE,UAAA,KAGE,UAAA,kCAQA,YAAA,KF2BF,YAAA,IACA,eAAA,SCyQF,IDtQA,GE1CE,UAAA,OAGE,UAAA,kCAQA,YAAA,KFkCF,YAAA,IACA,eAAA,QC2QF,IDxQA,GEjDE,UAAA,QAGE,UAAA,qCAQA,YAAA,KFyCF,YAAA,IACA,eAAA,QC6QF,ID1QA,GExDE,UAAA,KAGE,UAAA,gCAYA,YAAA,IF4CF,YAAA,IACA,eAAA,QC+QF,ID5QA,GE/DE,UAAA,QAeE,YAAA,IFmDF,YAAA,IACA,eAAA,QAaF,MC4QA,IACA,ID1QE,UAAA,MACA,UAAA,kBAGF,EACE,MAAA,QACA,gBAAA,UAGF,SACE,MAAA,QAGF,EACE,OAAA,EAAA,EAAA,KACA,YAAA,KAEA,aACE,cAAA","file":"globals.css","sourcesContent":["@use \"../_all\" as *;\n\nbody {\n  color: color(\"gray\", \"400\");\n  font-family: font-stack(\"default\");\n  font-size: font-size(\"medium\");\n}\n\n/**\n * Default heading styles.\n *\n * 1. Use `:where` pseduo-function to zero out the specificity and make the\n *    styles easier to override. Browser support lacks IE, Edge 87-, Firefox\n *    77-, Chrome 87-, Safari 13.7-, so only include styles in this ruleset that\n *    are not critical.\n * 2. Give a base top and bottom margin as a starting point.\n * 3. Add a much larger top margin to headings that are not directly under a\n *    heading one level higher.\n * 4. Not concerned with lowering the specificity of H1 styles, as there should\n *    only ever be one H1 on a page, and it should always look the same (if\n *    visible). By contrast, lower level headings may be used inside components,\n *    etc., and may require different styling while keeping the semantic\n *    meaning.\n */\n\n:where(h1, h2, h3, h4, h5, h6),\n.h1, .h2, .h3, .h4, .h5, .h6 { // 1\n  font-family: font-stack(\"headings\");\n}\n\n:where(h2, h3, h4, h5, h6),\n.h2, .h3, .h4, .h5, .h6 { // 1\n  margin: 1rem 0; // 2\n}\n\n:where(:not(h1) + h2),\n:where(:not(h2) + h3) {\n  margin-top: 3.5rem; // 3\n}\n\n:where(:not(h3) + h4) {\n  margin-top: 2rem; // 3\n}\n\nh1,\n.h1 { // 4\n  @include font-size(\"xx-large\");\n  font-weight: font-weight(\"semibold\");\n  letter-spacing: -.025em;\n  margin: 0 0 2rem;\n}\n\nh2,\n.h2 {\n  @include font-size(\"x-large\");\n  font-weight: font-weight(\"normal\");\n  letter-spacing: -.0125em;\n}\n\nh3,\n.h3 {\n  @include font-size(\"large\");\n  font-weight: font-weight(\"normal\");\n  letter-spacing: .0125em;\n}\n\nh4,\n.h4 {\n  @include font-size(\"medium-plus\");\n  font-weight: font-weight(\"normal\");\n  letter-spacing: .0125em;\n}\n\nh5,\n.h5 {\n  @include font-size(\"medium\");\n  font-weight: font-weight(\"bold\");\n  letter-spacing: .0125em;\n}\n\nh6,\n.h6 {\n  @include font-size(\"small\");\n  font-weight: font-weight(\"bold\");\n  letter-spacing: .0125em;\n}\n\n/**\n * Styles for elements that make contained text smaller relative to the\n * element's parent font size.\n *\n * 1. Fallback/base style. Makes these elements' font size 87.5% of the parent\n *    font size.\n * 2. If supported, do not allow the font size to go below the absolute\n *    acceptable minimum font size (`x-small`).\n */\n\nsmall,\nsub,\nsup {\n  font-size: 87.5%; // 1\n  font-size: max(#{font-size(\"x-small\"), 87.5%}); // 2\n}\n\na {\n  color: theme-color(\"link\");\n  text-decoration: underline;\n}\n\n:visited {\n  color: theme-color(\"link\", \"400\");\n}\n\np {\n  margin: 0 0 1rem;\n  line-height: line-height(\"loose\");\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n}","/**\n * A generic getter function for maps. This is not simply to be a shortcut/alias\n * for `map.get`, but to standardize error handling and prevent null\n * compilations.\n */\n/**\n * Generic mixins.\n */\n/**\n * For visually hiding an element while keeping it accessible to screen readers.\n * This mixin corresponds with the `.visually-hidden` utility class (see\n * _utilities), but can be applied to any element.\n */\n/**\n * A mixin for targeting specific browsers based off of feature or media\n * queries.\n *\n * Except in extreme circumstances, the use of this mixin is NOT recommended.\n * Instead, opt for progressive enhancement with Feature Queries, or some\n * graceful degradation strategy. This mixin is only intended to be used to\n * address specific rendering quirks or known vendor bugs that cannot be\n * addressed any other way. It should not be used to build parallel stylesheets\n * for different browsers.\n *\n * Be warned that many of these browser-sniffing techniques are unstable, as\n * they typically test for the (lack of) support of certain features that may\n * end up becoming supported in the future. In this event, the queries should be\n * changed to include the version supported, e.g. from \"safari\" to \"lte safari\n * 15\" (less-than or equal-to Safari 15).\n *\n * If this happens, conditional styles should be reassessed. If a feature\n * becomes supported in a new version of a browser, detecting that browser at\n * all may no longer be necessary. If it is still necessary, a different browser\n * detection technique will need to be added under the original query.\n *\n * Also note that in most cases, browser targeting is done with the `@supports`\n * query, which is not supported in any version of IE, Edge < 12, Firefox <= 21,\n * Chrome <= 27, Safari <= 8, or iOS Safari <= 8.4. IE 11 is detected through\n * separate means. See https://caniuse.com/css-featurequeries.\n *\n * @param {string} $browser - The name of the browser or specific query.\n *   Available options are:\n *   - \"firefox\"\n *   - \"not firefox\"\n *   - \"chromium\" (Chrome, modern Edge, etc.)\n *   - \"not chromium\"\n *   - \"sarari\" or \"any safari\" (macOS and iOS)\n *   - \"ios safari\" or \"mobile safari\"\n *   - \"macos safari\" or \"desktop safari\"\n *   - \"not safari\"\n *   - \"ie 11\" or \"gte ie 10\"\n *   - \"edge not chromium\" or \"edgehtml\" or \"lt edge 79\"\n */\n/**\n * Typography design tokens. Each token and its value is stored in a map. Note\n * that each map has a corresponding getter function (see _functions.scss) for\n * easier access. For example, rather than `map.get($font-stacks, \"default\")`,\n * you can simply use `font-stack(\"default\")`.\n */\n/**\n * Semantic font stacks. These are first stored as configuration variables for\n * easier overriding on import (downstream use).\n *\n * See: font-stack()\n */\n/**\n * Semantic font sizes, on a scale of x-small to xx-large. In addition to a\n * getter function, there is also a mixin for generating responsive font sizes\n * based on the static values here (as well as automatically providing the\n * appropriate line-height).\n *\n * See: font-size()\n */\n/**\n * Font weights. These are stored as tokens in the event of a typeface change,\n * since exact numeric values depend on the type. For example, semibold can mean\n * 500 or 600 depending on the font.\n *\n * See: font-weight()\n */\n/**\n * Semantic line heights, on a scale of x-tight to x-loose. Generally, larger\n * text should have a tighter line height, medium text should have a looser line\n * height, and smaller text should have a medium line height.\n *\n * See: line-height()\n */\n/**\n * Getter functions for variable maps.\n */\n/**\n * A getter function for the `$font-stacks` map (see _variables).\n */\n/**\n * A getter function for the `$font-sizes` map (see _variables).\n */\n/**\n * A getter function for the `$font-weights` map (see _variables).\n */\n/**\n * A getter function for the `$line-heights` map (see _variables).\n */\n/**\n * A mixin for generating responsive font sizes and automatically providing the\n * appropriate line-height based on the font-size.\n *\n * 1. A static fallback for browsers that do not support `clamp`.\n * 2. Only generate a responsive font size if it has not been disabled, and if\n *    the font size is not x-small or small (which are already at their own\n *    minimums.\n * 3. Font sizes will flex with the screen width (1%), with constraints of 66%\n *    (minimum) and 100% (maximum) of the given font-size.\n * 4. Set a tight line-height for font sizes xx-large through medium-plus.\n * 5. Set a normal line-height for font sizes medium through x-small.\n */\n/**\n * Animation design tokens. Each token and its value is stored in a map. Note\n * that each map has a corresponding getter function (see _functions.scss) for\n * easier access. For example, rather than `map.get($animation-properties,\n * \"productive\")`, you can simply use `animation(\"productive\")`.\n */\n/**\n * Easing and timing variables for animations and transitions.\n *\n * \"Productive\" motion is fast and snappy, and is best used for productive user\n * tasks, or elements that only need subtle animation.\n *\n * \"Expressive\" motion is slower and smoother, and is best used to draw a user's\n * attention to a different portion of the screen from where they clicked or\n * where their focus may be.\n *\n * See: animation()\n */\n/**\n * Utility functions for animations and transitions.\n */\n/**\n * A getter function for the `$animation-properties` map (see _variables).\n */\n/**\n * Mixins related to motion (animation or transitions).\n */\n/**\n * A media query for detecting whether a user prefers reduced motion.\n */\n/**\n * A media query for detecting whether the user has not set a motion preference.\n */\n/**\n * Layout design tokens. Each token and its value is stored in a map. Note\n * that each map has a corresponding getter function (see _functions.scss) for\n * easier access. For example, rather than `map.get($sizes, \"small\")`,\n * you can simply use `size(\"small\")`.\n */\n/**\n * The global base unit. All layout-related measurements should be an even\n * multiple of this unit.\n */\n/**\n * Semantic sizes on a scale of x-small to x-large. Useful for setting widths\n * and heights at the component/element level (for instance to keep size\n * modifiers consistent across components). Not as useful for measurements of\n * larger-scale layouts, which should be flexible and use relative units rather\n * than absolute/static. For fixed, larger-scale layout measurements to use at\n * the macro level, consider breakpoint tokens instead.\n *\n * See: size()\n */\n/**\n * Semantic spaces on a scale of x-tight to x-loose. Useful for setting margin,\n * padding, gap, etc.\n *\n * See: space()\n */\n/**\n * Breakpoints on a scale of small to x-large. Useful for global coordination\n * between elements. However, it is generally recommended to set breakpoints on\n * a case-by-case basis according to works best for the element in question.\n * These are only intended to be optional starting points for when the exact\n * breakpoint doesn't necessarily matter.\n *\n * See: breakpoint()\n */\n/**\n * Layers for setting z-index. This is to help manage z-indices from a single\n * source of truth, to ensure elements layer over each other properly, and avoid\n * arbitrary escalation of z-index values. When a new entry is added here,\n * consider its relationship to the other elements listed and adjust each as\n * needed. For instance, a modal should be on top of a sticky header.\n *\n * Note that negative values, 1, and 2 are reserved. They are allowed to be used\n * anywhere and do not need to be systematized, as they are often only useful\n * for setting z-indices relative to the stacking context of the element in\n * question.\n *\n * See: layer()\n */\n/**\n * Utility functions for the layout system.\n */\n/**\n * A generic getter function for layout maps. Checks that `$unit` is of a\n * supported type (px, rem, or em), then converts the px value stored in the map\n * to rem or em if specified.\n */\n/**\n * A getter function for the `$sizes` map (see _variables).\n */\n/**\n * A getter function for the `$spaces` map (see _variables).\n */\n/**\n * A getter function for the `$breakpoints` map (see _variables).\n */\n/**\n * A getter function for the `$layers` map (see _variables).\n */\n/**\n * Color design tokens. Each token and its value is stored in a map. Note that\n * each map has a corresponding getter function (see _functions.scss) for easier\n * access. For example, rather than `map.get($colors, \"red\")`, you can simply\n * use `color(\"red\")`.\n */\n/**\n * Basic color dictionary. Grades indicate lightness (perceptual luminosity), on\n * a scale of 0 (lightest) to 500 (darkest), at increments of 100.\n *\n * See: color()\n */\n/**\n * Interface aliases are keywords used to reference colors according to the role\n * they serve in a user interface.\n *\n * See: interface-color()\n */\n/**\n * Theme aliases are keywords used to reference colors according to the role\n * they serve in the theme and brand scheme. Default colors are set here, but\n * they are expected to be overridden on a site-by-site basis according to that\n * site's branding.\n *\n * See: theme-color()\n */\n/**\n * Utility functions for the color system.\n */\n/**\n * A generic getter function for color maps. First checks that `$color-token` is\n * a valid key for `$color-map`, then that `$grade` is a valid grade for\n * `$color-token`.\n */\n/**\n * A getter function for the `$colors` map (see _variables).\n */\n/**\n * A getter function for the `$interface-colors` map (see _variables).\n */\n/**\n * A getter function for the `$theme-colors` map (see _variables).\n */\nbody {\n  color: #464652;\n  font-family: Inter, system-ui, sans-serif;\n  font-size: 1rem;\n}\n\n/**\n * Default heading styles.\n *\n * 1. Use `:where` pseduo-function to zero out the specificity and make the\n *    styles easier to override. Browser support lacks IE, Edge 87-, Firefox\n *    77-, Chrome 87-, Safari 13.7-, so only include styles in this ruleset that\n *    are not critical.\n * 2. Give a base top and bottom margin as a starting point.\n * 3. Add a much larger top margin to headings that are not directly under a\n *    heading one level higher.\n * 4. Not concerned with lowering the specificity of H1 styles, as there should\n *    only ever be one H1 on a page, and it should always look the same (if\n *    visible). By contrast, lower level headings may be used inside components,\n *    etc., and may require different styling while keeping the semantic\n *    meaning.\n */\n:where(h1, h2, h3, h4, h5, h6),\n.h1, .h2, .h3, .h4, .h5, .h6 {\n  font-family: Inter, system-ui, sans-serif;\n}\n\n:where(h2, h3, h4, h5, h6),\n.h2, .h3, .h4, .h5, .h6 {\n  margin: 1rem 0;\n}\n\n:where(:not(h1) + h2),\n:where(:not(h2) + h3) {\n  margin-top: 3.5rem;\n}\n\n:where(:not(h3) + h4) {\n  margin-top: 2rem;\n}\n\nh1,\n.h1 {\n  font-size: 2.5rem;\n  font-size: clamp(1.65rem, 1.65rem + 1vw, 2.5rem);\n  line-height: 1.25;\n  font-weight: 600;\n  letter-spacing: -0.025em;\n  margin: 0 0 2rem;\n}\n\nh2,\n.h2 {\n  font-size: 2rem;\n  font-size: clamp(1.32rem, 1.32rem + 1vw, 2rem);\n  line-height: 1.25;\n  font-weight: 400;\n  letter-spacing: -0.0125em;\n}\n\nh3,\n.h3 {\n  font-size: 1.5rem;\n  font-size: clamp(0.99rem, 0.99rem + 1vw, 1.5rem);\n  line-height: 1.25;\n  font-weight: 400;\n  letter-spacing: 0.0125em;\n}\n\nh4,\n.h4 {\n  font-size: 1.25rem;\n  font-size: clamp(0.825rem, 0.825rem + 1vw, 1.25rem);\n  line-height: 1.25;\n  font-weight: 400;\n  letter-spacing: 0.0125em;\n}\n\nh5,\n.h5 {\n  font-size: 1rem;\n  font-size: clamp(0.66rem, 0.66rem + 1vw, 1rem);\n  line-height: 1.5;\n  font-weight: 700;\n  letter-spacing: 0.0125em;\n}\n\nh6,\n.h6 {\n  font-size: 0.875rem;\n  line-height: 1.5;\n  font-weight: 700;\n  letter-spacing: 0.0125em;\n}\n\n/**\n * Styles for elements that make contained text smaller relative to the\n * element's parent font size.\n *\n * 1. Fallback/base style. Makes these elements' font size 87.5% of the parent\n *    font size.\n * 2. If supported, do not allow the font size to go below the absolute\n *    acceptable minimum font size (`x-small`).\n */\nsmall,\nsub,\nsup {\n  font-size: 87.5%;\n  font-size: max(0.75rem, 87.5%);\n}\n\na {\n  color: #2d73bc;\n  text-decoration: underline;\n}\n\n:visited {\n  color: #004880;\n}\n\np {\n  margin: 0 0 1rem;\n  line-height: 1.75;\n}\np:last-child {\n  margin-bottom: 0;\n}","@use \"_variables\" as *;\n@use \"_functions\" as *;\n\n/**\n * A mixin for generating responsive font sizes and automatically providing the\n * appropriate line-height based on the font-size.\n *\n * 1. A static fallback for browsers that do not support `clamp`.\n * 2. Only generate a responsive font size if it has not been disabled, and if\n *    the font size is not x-small or small (which are already at their own\n *    minimums.\n * 3. Font sizes will flex with the screen width (1%), with constraints of 66%\n *    (minimum) and 100% (maximum) of the given font-size.\n * 4. Set a tight line-height for font sizes xx-large through medium-plus.\n * 5. Set a normal line-height for font sizes medium through x-small.\n */\n@mixin font-size($font-size, $responsive: true) {\n  font-size: font-size($font-size); // 1\n\n  @if $responsive != false and $font-size != \"x-small\" and $font-size != \"small\" { // 2\n    font-size: clamp(\n      (font-size($font-size) * .66),\n      ((font-size($font-size) * .66) + 1vw),\n      font-size($font-size)\n    ); // 3\n  }\n\n  @if index((\"xx-large\", \"x-large\", \"large\", \"medium-plus\"), $font-size) {\n    line-height: line-height(\"tight\"); // 4\n  }\n\n  @if index((\"medium\", \"small\", \"x-small\"), $font-size) {\n    line-height: line-height(\"normal\");\n  }\n} "]}