{"version":3,"sources":["@tcds/typography/globals.scss","@tcds/typography/globals.css","@tcds/typography/_mixins.scss"],"names":[],"mappings":"AAEA,KACE,MAAA,QACA,YAAA,KAAA,CAAA,SAAA,CAAA,WACA,UAAA,KCqJF,IAAK,IAAK,IAAK,IAAK,IAAK,IDjIzB,0BAEE,YAAA,KAAA,CAAA,SAAA,CAAA,WCoIF,IAAK,IAAK,IAAK,IAAK,IDjIpB,uBAEE,OAAA,KAAA,EAGF,oBCiIA,oBD/HE,WAAA,OAGF,oBACE,WAAA,KCoIF,IDjIA,GErCE,UAAA,OAGE,UAAA,oCAWA,YAAA,KF0BF,YAAA,IACA,eAAA,QACA,OAAA,EAAA,EAAA,KCsIF,IDnIA,GE7CE,UAAA,KAGE,UAAA,kCAWA,YAAA,KFkCF,YAAA,IACA,eAAA,SCwIF,IDrIA,GEpDE,UAAA,OAGE,UAAA,kCAWA,YAAA,KFyCF,YAAA,IACA,eAAA,QC0IF,IDvIA,GE3DE,UAAA,QAGE,UAAA,qCAWA,YAAA,KFgDF,YAAA,IACA,eAAA,QC4IF,IDzIA,GElEE,UAAA,KAGE,UAAA,gCAiBA,YAAA,IFiDF,YAAA,IACA,eAAA,QC8IF,ID3IA,GEzEE,UAAA,QAoBE,YAAA,IFwDF,YAAA,IACA,eAAA,QAaF,MC2IA,IACA,IDzIE,UAAA,MACA,UAAA,kBAGF,EACE,MAAA,QACA,gBAAA,UAGF,SACE,MAAA,QAGF,EACE,OAAA,EAAA,EAAA,KACA,YAAA,KAEA,aACE,cAAA","file":"globals.css","sourcesContent":["@use \"../_all\" as *;\n\nbody {\n  color: color(\"gray\", \"400\");\n  font-family: font-stack(\"default\");\n  font-size: font-size(\"medium\");\n}\n\n/**\n * Default heading styles.\n *\n * 1. Use `:where` pseduo-function to zero out the specificity and make the\n *    styles easier to override. Browser support lacks IE, Edge 87-, Firefox\n *    77-, Chrome 87-, Safari 13.7-, so only include styles in this ruleset that\n *    are not critical.\n * 2. Give a base top and bottom margin as a starting point.\n * 3. Add a much larger top margin to headings that are not directly under a\n *    heading one level higher.\n * 4. Not concerned with lowering the specificity of H1 styles, as there should\n *    only ever be one H1 on a page, and it should always look the same (if\n *    visible). By contrast, lower level headings may be used inside components,\n *    etc., and may require different styling while keeping the semantic\n *    meaning.\n */\n\n:where(h1, h2, h3, h4, h5, h6),\n.h1, .h2, .h3, .h4, .h5, .h6 { // 1\n  font-family: font-stack(\"headings\");\n}\n\n:where(h2, h3, h4, h5, h6),\n.h2, .h3, .h4, .h5, .h6 { // 1\n  margin: 1rem 0; // 2\n}\n\n:where(:not(h1) + h2),\n:where(:not(h2) + h3) {\n  margin-top: 3.5rem; // 3\n}\n\n:where(:not(h3) + h4) {\n  margin-top: 2rem; // 3\n}\n\nh1,\n.h1 { // 4\n  @include font-size(\"xx-large\");\n  font-weight: font-weight(\"semibold\");\n  letter-spacing: -.025em;\n  margin: 0 0 2rem;\n}\n\nh2,\n.h2 {\n  @include font-size(\"x-large\");\n  font-weight: font-weight(\"normal\");\n  letter-spacing: -.0125em;\n}\n\nh3,\n.h3 {\n  @include font-size(\"large\");\n  font-weight: font-weight(\"normal\");\n  letter-spacing: .0125em;\n}\n\nh4,\n.h4 {\n  @include font-size(\"medium-plus\");\n  font-weight: font-weight(\"normal\");\n  letter-spacing: .0125em;\n}\n\nh5,\n.h5 {\n  @include font-size(\"medium\");\n  font-weight: font-weight(\"bold\");\n  letter-spacing: .0125em;\n}\n\nh6,\n.h6 {\n  @include font-size(\"small\");\n  font-weight: font-weight(\"bold\");\n  letter-spacing: .0125em;\n}\n\n/**\n * Styles for elements that make contained text smaller relative to the\n * element's parent font size.\n *\n * 1. Fallback/base style. Makes these elements' font size 87.5% of the parent\n *    font size.\n * 2. If supported, do not allow the font size to go below the absolute\n *    acceptable minimum font size (`x-small`).\n */\n\nsmall,\nsub,\nsup {\n  font-size: 87.5%; // 1\n  font-size: max(#{font-size(\"x-small\"), 87.5%}); // 2\n}\n\na {\n  color: theme-color(\"link\");\n  text-decoration: underline;\n}\n\n:visited {\n  color: theme-color(\"link\", \"400\");\n}\n\np {\n  margin: 0 0 1rem;\n  line-height: 1.75;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n}","/**\n * Generic mixins.\n */\n/**\n * For visually hiding an element while keeping it accessible to screen readers.\n * This mixin corresponds with the `.visually-hidden` utility class (see\n * _utilities), but can be applied to any element.\n */\n/**\n * A mixin for targeting specific browsers based off of feature or media\n * queries.\n *\n * Except in extreme circumstances, the use of this mixin is NOT recommended.\n * Instead, opt for progressive enhancement with Feature Queries, or some\n * graceful degradation strategy. This mixin is only intended to be used to\n * address specific rendering quirks or known vendor bugs that cannot be\n * addressed any other way. It should not be used to build parallel stylesheets\n * for different browsers.\n *\n * Be warned that many of these browser-sniffing techniques are unstable, as\n * they typically test for the (lack of) support of certain features that may\n * end up becoming supported in the future. In this event, the queries should be\n * changed to include the version supported, e.g. from \"safari\" to \"lte safari\n * 15\" (less-than or equal-to Safari 15).\n *\n * If this happens, conditional styles should be reassessed. If a feature\n * becomes supported in a new version of a browser, detecting that browser at\n * all may no longer be necessary. If it is still necessary, a different browser\n * detection technique will need to be added under the original query.\n *\n * Also note that in most cases, browser targeting is done with the `@supports`\n * query, which is not supported in any version of IE, Edge < 12, Firefox <= 21,\n * Chrome <= 27, Safari <= 8, or iOS Safari <= 8.4. IE 11 is detected through\n * separate means. See https://caniuse.com/css-featurequeries.\n *\n * @param {string} $browser - The name of the browser or specific query.\n *   Available options are:\n *   - \"firefox\"\n *   - \"not firefox\"\n *   - \"chromium\" (Chrome, modern Edge, etc.)\n *   - \"not chromium\"\n *   - \"sarari\" or \"any safari\" (macOS and iOS)\n *   - \"ios safari\" or \"mobile safari\"\n *   - \"macos safari\" or \"desktop safari\"\n *   - \"not safari\"\n *   - \"ie 11\" or \"gte ie 10\"\n *   - \"edge not chromium\" or \"edgehtml\" or \"lt edge 79\"\n */\n/**\n * Animation and transition variables.\n */\n/**\n * Easing and timing variables for animations and transitions.\n *\n * \"Productive\" motion is fast and snappy, and is best used for productive user\n * tasks, or elements that only need subtle animation.\n *\n * \"Expressive\" motion is slower and smoother, and is best used to draw a user's\n * attention to a different portion of the screen from where they clicked or\n * where their focus may be.\n *\n * This map has a corresponding getter function, `animation` (see _functions).\n */\n/**\n * Utility functions for animations and transitions.\n */\n/**\n * A getter function for the `$animation-properties` map (see _variables).\n */\n/**\n * Mixins related to motion (animation or transitions).\n */\n/**\n * A media query for detecting whether a user prefers reduced motion.\n */\n/**\n * A media query for detecting whether the user has not set a motion preference.\n */\n/**\n * Utility functions for the layout system.\n */\n/**\n * Color dictionary.\n *\n * The following color grades use the CIELUV color model for perceptual\n * uniformity, and were generated using the HSLuv tool. Using the primary red\n * brand color (#da2530) as the starting point, all reds have 11deg hue, and all\n * base colors (grade 300) have 47.6% lightness. Most colors have 87.7%\n * saturation, except for yellow and green due to having a broader saturation\n * range (normalized by eye).\n *\n * The following hues were used to generate the other colors:\n * blue = 250\n * yellow = 78.8\n * green = 135\n * gray = 265.9\n *\n * Tints and shades of each color were generated in increments of roughly\n * 10%-20%, and indexed on a scale of 0 to 500 in increments of 100:\n * 0 = 97.5% (~100%)\n * 100 = 90%\n * 200 = 70%\n * 300: 47.6% (~50%)\n * 400: 30%\n * 500: 10%\n *\n * Any two colors are accessible together if the difference between their grades\n * is 300 or greater.\n */\n/**\n * Interface aliases are keywords used to reference colors according to the role\n * they serve in a user interface.\n */\n/**\n * Theme aliases are keywords used to reference colors according to the role\n * they serve in the theme and brand scheme. Default colors are set here, but\n * they are expected to be overridden on a site-by-site basis according to that\n * site's branding.\n */\n/**\n * Utility functions for the color system.\n */\n/**\n * A getter function for the `$colors` map (see _variables).\n */\n/**\n * A getter function for the `$interface-colors` map (see _variables).\n */\n/**\n * A getter function for the `$theme-colors` map (see _variables).\n */\nbody {\n  color: #464652;\n  font-family: Inter, system-ui, sans-serif;\n  font-size: 1rem;\n}\n\n/**\n * Default heading styles.\n *\n * 1. Use `:where` pseduo-function to zero out the specificity and make the\n *    styles easier to override. Browser support lacks IE, Edge 87-, Firefox\n *    77-, Chrome 87-, Safari 13.7-, so only include styles in this ruleset that\n *    are not critical.\n * 2. Give a base top and bottom margin as a starting point.\n * 3. Add a much larger top margin to headings that are not directly under a\n *    heading one level higher.\n * 4. Not concerned with lowering the specificity of H1 styles, as there should\n *    only ever be one H1 on a page, and it should always look the same (if\n *    visible). By contrast, lower level headings may be used inside components,\n *    etc., and may require different styling while keeping the semantic\n *    meaning.\n */\n:where(h1, h2, h3, h4, h5, h6),\n.h1, .h2, .h3, .h4, .h5, .h6 {\n  font-family: Inter, system-ui, sans-serif;\n}\n\n:where(h2, h3, h4, h5, h6),\n.h2, .h3, .h4, .h5, .h6 {\n  margin: 1rem 0;\n}\n\n:where(:not(h1) + h2),\n:where(:not(h2) + h3) {\n  margin-top: 3.5rem;\n}\n\n:where(:not(h3) + h4) {\n  margin-top: 2rem;\n}\n\nh1,\n.h1 {\n  font-size: 2.5rem;\n  font-size: clamp(1.65rem, 1.65rem + 1vw, 2.5rem);\n  line-height: 1.25;\n  font-weight: 600;\n  letter-spacing: -0.025em;\n  margin: 0 0 2rem;\n}\n\nh2,\n.h2 {\n  font-size: 2rem;\n  font-size: clamp(1.32rem, 1.32rem + 1vw, 2rem);\n  line-height: 1.25;\n  font-weight: 400;\n  letter-spacing: -0.0125em;\n}\n\nh3,\n.h3 {\n  font-size: 1.5rem;\n  font-size: clamp(0.99rem, 0.99rem + 1vw, 1.5rem);\n  line-height: 1.25;\n  font-weight: 400;\n  letter-spacing: 0.0125em;\n}\n\nh4,\n.h4 {\n  font-size: 1.25rem;\n  font-size: clamp(0.825rem, 0.825rem + 1vw, 1.25rem);\n  line-height: 1.25;\n  font-weight: 400;\n  letter-spacing: 0.0125em;\n}\n\nh5,\n.h5 {\n  font-size: 1rem;\n  font-size: clamp(0.66rem, 0.66rem + 1vw, 1rem);\n  line-height: 1.5;\n  font-weight: 700;\n  letter-spacing: 0.0125em;\n}\n\nh6,\n.h6 {\n  font-size: 0.875rem;\n  line-height: 1.5;\n  font-weight: 700;\n  letter-spacing: 0.0125em;\n}\n\n/**\n * Styles for elements that make contained text smaller relative to the\n * element's parent font size.\n *\n * 1. Fallback/base style. Makes these elements' font size 87.5% of the parent\n *    font size.\n * 2. If supported, do not allow the font size to go below the absolute\n *    acceptable minimum font size (`x-small`).\n */\nsmall,\nsub,\nsup {\n  font-size: 87.5%;\n  font-size: max(0.75rem, 87.5%);\n}\n\na {\n  color: #2d73bc;\n  text-decoration: underline;\n}\n\n:visited {\n  color: #004880;\n}\n\np {\n  margin: 0 0 1rem;\n  line-height: 1.75;\n}\np:last-child {\n  margin-bottom: 0;\n}","@use \"_variables\" as *;\n@use \"_functions\" as *;\n\n@mixin font-size($font-size, $responsive: true) {\n  $negative-offset: 1rem;\n  $flex-factor: 1vw;\n\n  font-size: font-size($font-size);\n\n  @if $responsive != false and $font-size != \"x-small\" and $font-size != \"small\" {\n    font-size: clamp(\n      (font-size($font-size) * .66),\n      ((font-size($font-size) * .66) + $flex-factor),\n      font-size($font-size)\n    );\n  }\n\n  @if  $font-size == \"xx-large\"\n    or $font-size == \"x-large\"\n    or $font-size == \"large\"\n    or $font-size == \"medium-plus\" {\n    line-height: 1.25;\n  }\n\n  @if  $font-size == \"medium\"\n    or $font-size == \"small\"\n    or $font-size == \"x-small\" {\n    line-height: 1.5;\n  }\n} "]}