{"version":3,"sources":["@tcds/ie/layout/utilities.scss","@tcds/ie/layout/utilities.css"],"names":[],"mappings":"AAiBE,oCC+HF,oCD7HI,YAAA,ICkIJ,uCD/HE,uCAEE,WAAA,IAGF,oBACE,OAAA,IAXF,kCC6IF,kCD3II,YAAA,ICgJJ,qCD7IE,qCAEE,WAAA,IAGF,kBACE,OAAA,IAXF,mCC2JF,mCDzJI,YAAA,KC8JJ,sCD3JE,sCAEE,WAAA,KAGF,mBACE,OAAA,IAXF,kCCyKF,kCDvKI,YAAA,KC4KJ,qCDzKE,qCAEE,WAAA,KAGF,kBACE,OAAA,KAXF,oCCuLF,oCDrLI,YAAA,KC0LJ,uCDvLE,uCAEE,WAAA,KAGF,oBACE,OAAA,KAWJ,MACE,iBAAA","file":"utilities.css","sourcesContent":["@use \"sass:math\";\n@use \"../../_all\" as *;\n\n/**\n * Fake gaps between flex or grid items (immediate children of flex or grid\n * containers) by adding margins. For rows, a left margin will be added to every\n * child except the first. For columns, a top margin will be added to every\n * child except the first. For grids, half the margin value will be added to all\n * sides (since the margin will double up).\n *\n * Note that this is only an approximate imitation of what gap does. With\n * flexbox, wrapping is not accounted for, meaning the first item on a new row\n * will have an awkward blank space at the block start. With grid, there will be\n * excess space around the entire container.\n */\n\n@each $token, $value in $spaces {\n  .gap-#{$token}.row > :not(:first-child),\n  .row-gap-#{$token} > :not(:first-child) {\n    margin-left: $value;\n  }\n\n  .gap-#{$token}.column > :not(:first-child),\n  .column-gap-#{$token} > :not(:first-child) {\n    margin-top: $value;\n  }\n\n  .gap-#{$token}.grid > * {\n    margin: math.div($value, 2);\n  }\n}\n\n/**\n * The features of the grid utility cannot be faked for IE. Instead, make each\n * grid container created with the utility a simple 1-column layout. Multiple\n * columns should be treated as a progressive enhancement beyond both IE and\n * smaller screens.\n */\n\n.grid {\n  -ms-grid-columns: 1fr;\n}","/**\n * Generic mixins.\n */\n/**\n * For visually hiding an element while keeping it accessible to screen readers.\n * This mixin corresponds with the `.visually-hidden` utility class (see\n * _utilities), but can be applied to any element.\n */\n/**\n * A mixin for targeting specific browsers based off of feature or media\n * queries.\n *\n * Except in extreme circumstances, the use of this mixin is NOT recommended.\n * Instead, opt for progressive enhancement with Feature Queries, or some\n * graceful degradation strategy. This mixin is only intended to be used to\n * address specific rendering quirks or known vendor bugs that cannot be\n * addressed any other way. It should not be used to build parallel stylesheets\n * for different browsers.\n *\n * Be warned that many of these browser-sniffing techniques are unstable, as\n * they typically test for the (lack of) support of certain features that may\n * end up becoming supported in the future. In this event, the queries should be\n * changed to include the version supported, e.g. from \"safari\" to \"lte safari\n * 15\" (less-than or equal-to Safari 15).\n *\n * If this happens, conditional styles should be reassessed. If a feature\n * becomes supported in a new version of a browser, detecting that browser at\n * all may no longer be necessary. If it is still necessary, a different browser\n * detection technique will need to be added under the original query.\n *\n * Also note that in most cases, browser targeting is done with the `@supports`\n * query, which is not supported in any version of IE, Edge < 12, Firefox <= 21,\n * Chrome <= 27, Safari <= 8, or iOS Safari <= 8.4. IE 11 is detected through\n * separate means. See https://caniuse.com/css-featurequeries.\n *\n * @param {string} $browser - The name of the browser or specific query.\n *   Available options are:\n *   - \"firefox\"\n *   - \"not firefox\"\n *   - \"chromium\" (Chrome, modern Edge, etc.)\n *   - \"not chromium\"\n *   - \"sarari\" or \"any safari\" (macOS and iOS)\n *   - \"ios safari\" or \"mobile safari\"\n *   - \"macos safari\" or \"desktop safari\"\n *   - \"not safari\"\n *   - \"ie 11\" or \"gte ie 10\"\n *   - \"edge not chromium\" or \"edgehtml\" or \"lt edge 79\"\n */\n/**\n * Animation and transition variables.\n */\n/**\n * Easing and timing variables for animations and transitions.\n *\n * \"Productive\" motion is fast and snappy, and is best used for productive user\n * tasks, or elements that only need subtle animation.\n *\n * \"Expressive\" motion is slower and smoother, and is best used to draw a user's\n * attention to a different portion of the screen from where they clicked or\n * where their focus may be.\n *\n * This map has a corresponding getter function, `animation` (see _functions).\n */\n/**\n * Utility functions for animations and transitions.\n */\n/**\n * A getter function for the `$animation-properties` map (see _variables).\n */\n/**\n * Mixins related to motion (animation or transitions).\n */\n/**\n * A media query for detecting whether a user prefers reduced motion.\n */\n/**\n * A media query for detecting whether the user has not set a motion preference.\n */\n/**\n * Utility functions for the layout system.\n */\n/**\n * Color dictionary.\n *\n * The following color grades use the CIELUV color model for perceptual\n * uniformity, and were generated using the HSLuv tool. Using the primary red\n * brand color (#da2530) as the starting point, all reds have 11deg hue, and all\n * base colors (grade 300) have 47.6% lightness. Most colors have 87.7%\n * saturation, except for yellow and green due to having a broader saturation\n * range (normalized by eye).\n *\n * The following hues were used to generate the other colors:\n * blue = 250\n * yellow = 78.8\n * green = 135\n * gray = 265.9\n *\n * Tints and shades of each color were generated in increments of roughly\n * 10%-20%, and indexed on a scale of 0 to 500 in increments of 100:\n * 0 = 97.5% (~100%)\n * 100 = 90%\n * 200 = 70%\n * 300: 47.6% (~50%)\n * 400: 30%\n * 500: 10%\n *\n * Any two colors are accessible together if the difference between their grades\n * is 300 or greater.\n */\n/**\n * Interface aliases are keywords used to reference colors according to the role\n * they serve in a user interface.\n */\n/**\n * Theme aliases are keywords used to reference colors according to the role\n * they serve in the theme and brand scheme. Default colors are set here, but\n * they are expected to be overridden on a site-by-site basis according to that\n * site's branding.\n */\n/**\n * Utility functions for the color system.\n */\n/**\n * A getter function for the `$colors` map (see _variables).\n */\n/**\n * A getter function for the `$interface-colors` map (see _variables).\n */\n/**\n * A getter function for the `$theme-colors` map (see _variables).\n */\n/**\n * Fake gaps between flex or grid items (immediate children of flex or grid\n * containers) by adding margins. For rows, a left margin will be added to every\n * child except the first. For columns, a top margin will be added to every\n * child except the first. For grids, half the margin value will be added to all\n * sides (since the margin will double up).\n *\n * Note that this is only an approximate imitation of what gap does. With\n * flexbox, wrapping is not accounted for, meaning the first item on a new row\n * will have an awkward blank space at the block start. With grid, there will be\n * excess space around the entire container.\n */\n.gap-x-tight.row > :not(:first-child),\n.row-gap-x-tight > :not(:first-child) {\n  margin-left: 4px;\n}\n\n.gap-x-tight.column > :not(:first-child),\n.column-gap-x-tight > :not(:first-child) {\n  margin-top: 4px;\n}\n\n.gap-x-tight.grid > * {\n  margin: 2px;\n}\n\n.gap-tight.row > :not(:first-child),\n.row-gap-tight > :not(:first-child) {\n  margin-left: 8px;\n}\n\n.gap-tight.column > :not(:first-child),\n.column-gap-tight > :not(:first-child) {\n  margin-top: 8px;\n}\n\n.gap-tight.grid > * {\n  margin: 4px;\n}\n\n.gap-normal.row > :not(:first-child),\n.row-gap-normal > :not(:first-child) {\n  margin-left: 16px;\n}\n\n.gap-normal.column > :not(:first-child),\n.column-gap-normal > :not(:first-child) {\n  margin-top: 16px;\n}\n\n.gap-normal.grid > * {\n  margin: 8px;\n}\n\n.gap-loose.row > :not(:first-child),\n.row-gap-loose > :not(:first-child) {\n  margin-left: 24px;\n}\n\n.gap-loose.column > :not(:first-child),\n.column-gap-loose > :not(:first-child) {\n  margin-top: 24px;\n}\n\n.gap-loose.grid > * {\n  margin: 12px;\n}\n\n.gap-x-loose.row > :not(:first-child),\n.row-gap-x-loose > :not(:first-child) {\n  margin-left: 32px;\n}\n\n.gap-x-loose.column > :not(:first-child),\n.column-gap-x-loose > :not(:first-child) {\n  margin-top: 32px;\n}\n\n.gap-x-loose.grid > * {\n  margin: 16px;\n}\n\n/**\n * The features of the grid utility cannot be faked for IE. Instead, make each\n * grid container created with the utility a simple 1-column layout. Multiple\n * columns should be treated as a progressive enhancement beyond both IE and\n * smaller screens.\n */\n.grid {\n  -ms-grid-columns: 1fr;\n}"]}