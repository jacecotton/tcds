{"version":3,"sources":["@tcds/typography/fonts.scss","@tcds/base/base.scss","@tcds/animation/_mixins.scss","@tcds/typography/globals.scss","@tcds/typography/_mixins.scss","@tcds/animation/library.scss","@tcds/primitives/buttons.scss","@tcds/primitives/lists.scss","@tcds/primitives/horizontal-rule.scss","@tcds/components/icon.scss","@tcds/components/button.scss","@tcds/components/accordion.scss","@tcds/base/_mixins.scss","@tcds/components/card.scss","@tcds/<no source>","@tcds/components/hero.scss","@tcds/components/message.scss","@tcds/base/utilities.scss","@tcds/layout/utilities.scss","@tcds/layout/_mixins.scss","@tcds/layout/_variables.scss","@tcds/color/utilities.scss","@tcds/color/_variables.scss","@tcds/typography/utilities.scss","@tcds/typography/_variables.scss"],"names":[],"mappings":"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","file":"tcds.css","sourcesContent":["@import url(\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700&display=swap\");","@use \"../_all\" as *;\n\n/**\n * Styles included here are commonly found in \"reset\", \"normalize\", or\n * \"preflight\" files. However, the purpose of this file is strictly to set some\n * better defaults as a starting point. It is not to eliminate or even normalize\n * differences between browsers.\n *\n * 1. Better default box model (padding while now no longer add to an element's\n *    dimensions, but instead push content inwards).\n */\n\n* {\n  box-sizing: border-box; // 1\n  margin: 0;\n  padding: 0;\n\n  &::before,\n  &::after {\n    box-sizing: border-box;\n  }\n}\n\n/**\n * 1. If \"reduced motion\" preference is not set, animate scrolling to anchors to\n *    better orient users as to the location and direction of a scroll change.\n */\nhtml {\n  @include motion-ok {\n    scroll-behavior: smooth; // 1\n  }\n}\n\n/**\n * 1. Ensure against horizontal scrolling on smaller screens.\n * 2. `position: sticky` won't work on an element with an ancestor (like `html,\n *    body`) that has an `overflow` property but not a `height`.\n * 3. Do not adjust font size on orientation change of mobile devices (i.e.,\n *    disable font zooming when changing to landscape mode).\n */\nbody {\n  display: block; // 1\n  width: 100%; // 1\n  overflow-x: hidden; // 1\n  height: 100%; // 2\n  text-size-adjust: 100%; // 3\n}\n\n/**\n * 1. Provide a more \"native\" feel on touch devices by removing the double-tap\n *    delay of single-tap-only elements.\n */\na,\nbutton,\ninput,\nselect,\nsummary,\ntextarea {\n  touch-action: manipulation; // 1\n}\n\n/**\n * 1. Prevent media elements from expanding beyond or stretching out the parent\n *    element.\n * 2. Remove default white space after inline elements.\n */\naudio,\ncanvas,\niframe,\nimg,\nsvg,\nvideo,\nbutton,\ntable {\n  max-width: 100%; // 1\n  height: auto;\n  vertical-align: middle; // 2\n}\n\n/**\n * 1. Make the `[hidden]` attribute stronger so it overrides the `display`\n *    property of the elements it's used on.\n */\n[hidden] {\n  display: none !important;\n}","/**\n * Mixins related to motion (animation or transitions).\n */\n\n/**\n * A media query for detecting whether a user prefers reduced motion.\n */\n@mixin reduced-motion() {\n  @media (prefers-reduced-motion: reduce) {\n    @content;\n  }\n}\n\n/**\n * A media query for detecting whether the user has not set a motion preference.\n */\n@mixin motion-ok() {\n  @media (prefers-reduced-motion: no-preference) {\n    @content;\n  }\n}","@use \"../_all\" as *;\n\nbody {\n  color: color(\"gray\", \"400\");\n  font-family: font-stack(\"default\");\n  font-size: font-size(\"medium\");\n}\n\n/**\n * Default heading styles.\n *\n * 1. Use `:where` pseduo-function to zero out the specificity and make the\n *    styles easier to override. Browser support lacks IE, Edge 87-, Firefox\n *    77-, Chrome 87-, Safari 13.7-, so only include styles in this ruleset that\n *    are not critical.\n * 2. Give a base top and bottom margin as a starting point.\n * 3. Add a much larger top margin to headings that are not directly under a\n *    heading one level higher.\n * 4. Not concerned with lowering the specificity of H1 styles, as there should\n *    only ever be one H1 on a page, and it should always look the same (if\n *    visible). By contrast, lower level headings may be used inside components,\n *    etc., and may require different styling while keeping the semantic\n *    meaning.\n */\n\n:where(h1, h2, h3, h4, h5, h6),\n.h1, .h2, .h3, .h4, .h5, .h6 { // 1\n  font-family: font-stack(\"headings\");\n}\n\n:where(h2, h3, h4, h5, h6),\n.h2, .h3, .h4, .h5, .h6 { // 1\n  margin: 1rem 0; // 2\n}\n\n:where(:not(h1) + h2),\n:where(:not(h2) + h3) {\n  margin-top: 3.5rem; // 3\n}\n\n:where(:not(h3) + h4) {\n  margin-top: 2rem; // 3\n}\n\nh1,\n.h1 { // 4\n  @include font-size(\"xx-large\");\n  font-weight: font-weight(\"semibold\");\n  letter-spacing: -.025em;\n  margin: 0 0 2rem;\n}\n\nh2,\n.h2 {\n  @include font-size(\"x-large\");\n  font-weight: font-weight(\"normal\");\n  letter-spacing: -.0125em;\n}\n\nh3,\n.h3 {\n  @include font-size(\"large\");\n  font-weight: font-weight(\"normal\");\n  letter-spacing: .0125em;\n}\n\nh4,\n.h4 {\n  @include font-size(\"medium-plus\");\n  font-weight: font-weight(\"normal\");\n  letter-spacing: .0125em;\n}\n\nh5,\n.h5 {\n  @include font-size(\"medium\");\n  font-weight: font-weight(\"bold\");\n  letter-spacing: .0125em;\n}\n\nh6,\n.h6 {\n  @include font-size(\"small\");\n  font-weight: font-weight(\"bold\");\n  letter-spacing: .0125em;\n}\n\n/**\n * Styles for elements that make contained text smaller relative to the\n * element's parent font size.\n *\n * 1. Fallback/base style. Makes these elements' font size 87.5% of the parent\n *    font size.\n * 2. If supported, do not allow the font size to go below the absolute\n *    acceptable minimum font size (`x-small`).\n */\n\nsmall,\nsub,\nsup {\n  font-size: 87.5%; // 1\n  font-size: max(#{font-size(\"x-small\"), 87.5%}); // 2\n}\n\na {\n  color: theme-color(\"link\");\n  text-decoration: underline;\n}\n\n:visited {\n  color: theme-color(\"link\", \"400\");\n}\n\np {\n  margin: 0 0 space(\"normal\", \"rem\");\n  line-height: line-height(\"loose\");\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n}","@use \"sass:string\";\n@use \"_variables\" as *;\n@use \"_functions\" as *;\n\n/**\n * A mixin for generating responsive font sizes and automatically providing the\n * appropriate line-height based on the font-size.\n *\n * 1. A static fallback for browsers that do not support `clamp`.\n * 2. Set a tight line-height for font sizes xx-large through medium-plus.\n * 3. Set a normal line-height for font sizes medium through x-small.\n */\n@mixin font-size($font-size, $responsive: true, $custom-property: false) {\n  font-size: font-size($font-size); // 1\n\n  @if $custom-property {\n    font-size: var(#{string.unquote($custom-property)}, #{font-size($font-size, $responsive: true)});\n  } @else {\n    font-size: font-size($font-size, $responsive: true);\n  }\n\n  @if index((\"xx-large\", \"x-large\", \"large\", \"medium-plus\"), $font-size) {\n    line-height: line-height(\"tight\"); // 2\n  }\n\n  @if index((\"medium\", \"small\", \"x-small\"), $font-size) {\n    line-height: line-height(\"normal\"); // 3\n  }\n} ","/**\n * Keyframe library for animations.\n */\n\n@keyframes fade-in {\n  from {\n    opacity: 0;\n    visibility: hidden;\n  }\n}\n\n@keyframes fade-out {\n  to {\n    opacity: 0;\n    visibility: hidden;\n  }\n}\n\n@keyframes slide-down {\n  from {\n    transform: translateY(-100%);\n  }\n}\n\n@keyframes slide-up {\n  from {\n    transform: translateY(100%);\n  }\n}\n\n@keyframes slide-right-reveal {\n  from {\n    transform: translateX(-100%);\n  }\n}\n\n@keyframes slide-right-hide {\n  to {\n    transform: translateX(100%);\n  }\n}\n\n@keyframes slide-left-reveal {\n  from {\n    transform: translateX(100%);\n  }\n}\n\n@keyframes slide-left-hide {\n  to {\n    transform: translateX(-100%);\n  }\n}","@use \"../_all\" as *;\n\n/**\n * Note this file is NOT for styles for the Button component, but instead for\n * global styles of generic button elements.\n */\n\nbutton,\n[type=button],\n[type=file],\n[type=reset],\n[type=submit] {\n  appearance: none;\n  -webkit-appearance: button; // Needed for Safari.\n  border: none;\n  font: inherit;\n  cursor: pointer;\n\n  &:not([class]) {\n    padding: space(\"tight\") space(\"normal\");\n    color: color(\"gray\", \"400\");\n    background-color: color(\"gray\", \"100\");\n    position: relative;\n\n    &::after {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      background-color: transparent;\n      transition: background-color animation(\"productive\");\n    }\n\n    &:hover::after {\n      background-color: color(\"shade\", \"0\");\n    }\n  }\n}","@use \"../_all\" as *;\n\nul, ol {\n  padding-left: 0;\n  list-style-position: inside;\n  line-height: line-height(\"normal\");\n\n  &:not(:last-child) {\n    margin: 0 0 space(\"normal\", \"rem\");\n  }\n}\n\ndl {\n  line-height: line-height(\"normal\");\n  \n  &:not(:last-child) {\n    margin: 0 0 space(\"normal\", \"rem\");\n  }\n\n  div {\n    &:not(:last-child) {\n      margin-bottom: space(\"normal\", \"rem\");\n    }\n  }\n}\n\ndt {\n  font-weight: font-weight(\"bold\");\n}","@use \"../_all\" as *;\n\nhr {\n  border: 0;\n  border-top: 6px solid color(\"shade\", \"100\");\n  clear: both;\n  margin: 0 0 space(\"loose\");\n}\n\n.hr--small {\n  border-top-width: 1px;\n}","@use \"../_all\" as *;\n\n.Icon {\n  display: inline-flex;\n  height: 1em;\n  vertical-align: middle;\n\n  svg {\n    height: 100%;\n    width: 100%;\n  }\n}","@use \"../_all\" as *;\n\n/**\n * 1. Since button labels never wrap, we can remove line height to trim excess\n *    vertical space.\n * 2. Vertical padding is not added because button height is explicitly set,\n *    then its contents are vertically centered.\n * 3. Clip overlays (icons and hover state) when corners are rounded.\n * 4. Contain absolute-positioned elements (icon and hover overlays).\n * 5. For link buttons.\n */\n\n.Button {\n  $button-height: size(\"medium\");\n  $button-font-size: font-size(\"medium\", $responsive: true);\n\n  display: inline-flex;\n  align-items: center;\n  background-color: var(--button-background, #{theme-color(\"primary\")});\n  color: var(--button-text-color, #{theme-color(\"primary\", \"0\")});\n  font-family: font-stack(\"ui\");\n  font-size: var(--button-font-size, #{$button-font-size});\n  font-weight: font-weight(\"semibold\");\n  line-height: 1; // 1\n  white-space: nowrap; // 1\n  height: var(--button-height, #{$button-height});\n  padding: 0 var(--button-padding, calc((#{$button-height} - var(--button-font-size, #{$button-font-size})) / 1.5)); // 2\n  overflow: hidden; // 3\n  position: relative; // 4\n  text-decoration: none; // 5\n  cursor: pointer;\n  transform: scale(var(--button-scale, 1)) translate(var(--button-translate, 0, 0));\n  transition: transform animation(\"productive\");\n  user-select: none;\n  z-index: 1;\n\n  /** States */\n\n  &:hover {\n    --button-overlay-color: #{color(\"shade\", \"100\")};\n  }\n\n  &:active {\n    --button-overlay-color: #{color(\"shade\", \"200\")};\n    --button-scale: .99;\n  }\n\n  /** Modifiers */\n\n  &--small {\n    --button-font-size: #{font-size(\"small\")};\n\n    @media (pointer: fine) {\n      --button-height: #{size(\"small\")};\n    }\n  }\n\n  &--large {\n    --button-height: #{size(\"large\")};\n    --button-font-size: #{font-size(\"medium-plus\")};\n  }\n\n  &--full-width {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n  }\n\n  &--round {\n    border-radius: var(--button-height);\n  }\n\n  &--ghost {\n    --button-background: transparent;\n    --button-text-color: \"inherit\";\n    --button-icon-background: transparent;\n  }\n\n  &--ghost#{&}--icon-right {\n    --button-icon-margin-left: 0;\n  }\n\n  &--ghost:not(#{&}--icon-right) {\n    --button-icon-margin-right: 0;\n  }\n\n  &--icon-right {\n    flex-direction: row-reverse;\n    --button-icon-margin-right: calc(var(--button-padding) * -1);\n    --button-icon-margin-left: var(--button-padding);\n  }\n\n  &--icon-only {\n    --button-padding: 0;\n    --button-icon-background: transparent;\n    --button-icon-margin-right: 0;\n    --button-icon-margin-left: 0;\n  }\n\n  /** Children */\n\n  &::after {\n    display: var(--button-overlay, block);\n    content: \"\";\n    background-color: var(--button-overlay-color, transparent);\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    transition: background-color animation(\"productive\");\n    z-index: -1;\n  }\n\n  svg {\n    background-color: var(--button-icon-background, #{color(\"shade\", \"100\")});\n    height: 100%;\n    margin:\n      0 var(--button-icon-margin-right, var(--button-padding))\n      0 var(--button-icon-margin-left, calc(var(--button-padding) * -1));\n    padding: calc(var(--button-padding) * .65);\n  }\n}","@use \"../_all\" as *;\n\n.Accordion {\n  &__controls {\n    display: flex;\n    justify-content: flex-end;\n    list-style: none;\n    margin: 0;\n  }\n\n  &__section {\n    margin-bottom: 3px;\n  }\n\n  &__heading {\n    margin: 0;\n  }\n\n  &__button {\n    appearance: none;\n    border: 0;\n    background: color(\"gray\", \"0\");\n    color: color(\"gray\", \"400\");\n    cursor: pointer;\n    display: flex;\n    justify-content: space-between;\n    font-family: font-stack(\"ui\");\n    font-size: font-size(\"medium\");\n    font-weight: font-weight(\"semibold\");\n    line-height: 1;\n    padding: space(\"normal\") space(\"loose\");\n    width: 100%;\n    transition:\n      background animation(\"productive\"),\n      color animation(\"productive\");\n\n    &:hover {\n      background: theme-color(\"secondary\");\n      color: theme-color(\"secondary\", \"0\");\n    }\n\n    &:focus-visible {\n      @include focus-style;\n    }\n\n    &:focus-visible:hover {\n      @include focus-style($inverted: true);\n    }\n\n    &[aria-expanded=\"true\"] {\n      --icon-rotate: 180deg;\n    }\n  }\n\n  &__icon {\n    height: 1em;\n    pointer-events: none;\n    transform: rotateZ(var(--icon-rotate, 0));\n    transition: transform animation(\"productive\");\n  }\n\n  &__panel {\n    overflow: hidden;\n    transition: height animation(\"expressive\");\n  }\n  \n  &__content {\n    padding: space(\"normal\");\n  }\n}","/**\n * Generic mixins.\n */\n\n/**\n * For visually hiding an element while keeping it accessible to screen readers.\n * This mixin corresponds with the `.visually-hidden` utility class (see\n * _utilities), but can be applied to any element.\n */\n@mixin visually-hidden {\n  clip: rect(0, 0, 0, 0);\n  clip-path: inset(50%);\n  height: 1px;\n  width: 1px;\n  position: absolute;\n}\n\n/**\n * For adding a consistent focus style to elements.\n */\n@mixin focus-style($inverted: false) {\n  $color: blue;\n\n  @if $inverted == true {\n    $color: yellow;\n  }\n\n  outline: 3px solid $color;\n}\n\n/**\n * A mixin for targeting specific browsers based off of feature or media\n * queries.\n *\n * Except in extreme circumstances, the use of this mixin is NOT recommended.\n * Instead, opt for progressive enhancement with Feature Queries, or some\n * graceful degradation strategy. This mixin is only intended to be used to\n * address specific rendering quirks or known vendor bugs that cannot be\n * addressed any other way. It should not be used to build parallel stylesheets\n * for different browsers.\n *\n * Be warned that many of these browser-sniffing techniques are unstable, as\n * they typically test for the (lack of) support of certain features that may\n * end up becoming supported in the future. In this event, the queries should be\n * changed to include the version supported, e.g. from \"safari\" to \"lte safari\n * 15\" (less-than or equal-to Safari 15).\n *\n * If this happens, conditional styles should be reassessed. If a feature\n * becomes supported in a new version of a browser, detecting that browser at\n * all may no longer be necessary. If it is still necessary, a different browser\n * detection technique will need to be added under the original query.\n *\n * Also note that in most cases, browser targeting is done with the `@supports`\n * query, which is not supported in any version of IE, Edge < 12, Firefox <= 21,\n * Chrome <= 27, Safari <= 8, or iOS Safari <= 8.4. IE 11 is detected through\n * separate means. See https://caniuse.com/css-featurequeries.\n *\n * @param {string} $browser - The name of the browser or specific query.\n *   Available options are:\n *   - \"firefox\"\n *   - \"not firefox\"\n *   - \"chromium\" (Chrome, modern Edge, etc.)\n *   - \"not chromium\"\n *   - \"sarari\" or \"any safari\" (macOS and iOS)\n *   - \"ios safari\" or \"mobile safari\"\n *   - \"macos safari\" or \"desktop safari\"\n *   - \"not safari\"\n *   - \"ie 11\" or \"gte ie 10\"\n *   - \"edge not chromium\" or \"edgehtml\" or \"lt edge 79\"\n */\n\n@mixin target-browser($browser) {\n  // https://www.bram.us/2021/06/23/css-at-supports-rules-to-target-only-firefox-safari-chromium/\n\n  $query: \"\";\n\n  /**\n   * Detects Firefox (Android Firefox not tested).\n   *\n   * Status: Stable\n   * Explanation: `-moz-appearance` will remain in all Firefox browsers for\n   *   backwards compatibility, going back to Firefox 2.\n   * Works: From Firefox 22 (start of Feature Query support).\n   */\n  @if $browser == \"firefox\" {\n    $query: \"-moz-appearance: none\";\n  }\n\n  /**\n   * Detects any browser that is not Firefox (Android Firefox not tested).\n   *\n   * Status: Stable\n   * Explanation: Refer to \"firefox\" comment block.\n   * Works: Refer to \"firefox\" comment block.\n   */\n  @if $browser == \"not firefox\" {\n    $query: \"not (-moz-appearance: none)\";\n  }\n\n  /**\n   * Detects Chromium-based browsers (Chrome, Edge, Brave, etc.) by testing for\n   * CSS Containment (Chromium and Firefox only), and then excluding Firefox.\n   *\n   * Status: Unstable\n   * Explanation: Safari may eventually support CSS Containment.\n   * Implication: This query may eventually target Safari.\n   * Works: From Chrome 52 and Edge 79 (start of CSS Containment support),\n   *   Firefox 22, macOS Safari 9, and iOS Safari 9 (start of Feature Query\n   *   support).\n   * Monitor: https://caniuse.com/css-containment\n   */\n  @if $browser == \"chromium\" {\n    $query: \"(contain: paint) and (not (-moz-appearance: none))\"\n  }\n\n  /**\n   * Detects non-Chromium-based browsers by testing for iOS Safari, macOS\n   * Safari, and Firefox.\n   *\n   * Status: Unstable\n   * Explanation: Reliably detects Firefox and iOS Safari only; does not\n   *   reliably detect macOS Safari (refer to respective comment blocks).\n   * Implication: This query may eventually target Chromium-based browsers.\n   * Works: From iOS Safari 9, macOS Safari 9, Firefox 22, Edge 12, Chrome 28\n   *   (start of Feature Query support).\n   * Monitor: https://caniuse.com/css-nth-child-of\n   */\n  @if $browser == \"not chromium\" {\n    $query: \"(-webkit-touch-callout: none) or (selector(:nth-child(1 of x))) or (-moz-appearance: none)\";\n  }\n\n  /**\n   * Detects macOS Safari or iOS Safari.\n   *\n   * Status: Unstable\n   * Explanation: Reliably detects iOS Safari only (refer to respective comment\n   *   block); other browsers may one day support `nth-child` \"of\" clause.\n   * Implication: This query may eventually target non-Safari browsers.\n   * Works: From iOS Safari 9, macOS Safari 9, Firefox 22, Edge 12, Chrome 28\n   *   (start of Feature Query support).\n   * Monitor: https://caniuse.com/css-nth-child-of\n   */\n  @if $browser == \"safari\" or $browser == \"any safari\" {\n    $query: \"(-webkit-touch-callout: none) or (selector(:nth-child(1 of x)))\";\n  }\n\n  /**\n   * Detects iOS Safari.\n   *\n   * Status: Stable\n   * Explanation: `-webkit-touch-callout` will remain in all iOS Safari browsers\n   *   for backwards compatibility, going back to Safari 3.2.\n   * Works: From iOS Safari 9 (start of Feature Query support).\n   */\n  @if $browser == \"ios safari\" or $browser == \"mobile safari\" {\n    $query: \"-webkit-touch-callout: none\";\n  }\n\n  /**\n   * Detects macOS Safari.\n   *\n   * Status: Unstable.\n   * Explanation: Other browsers may one day support `nth-child` \"of\" clause.\n   * Implication: This query may one day target non-macOS Safari browsers.\n   * Works: From macOS Safari 9 (start of \"of\" clause support), iOS Safari 9,\n   *   Edge 12, Chrome 28, Firefox 22 (start of Feature Query support).\n   * Monitor: https://caniuse.com/css-nth-child-of\n   */\n  @if $browser == \"macos safari\" or $browser == \"desktop safari\" {\n    $query: \"selector(:nth-child(1 of x))\";\n  }\n\n  /**\n   * Detects non-Safari (macOS or iOS) browsers.\n   *\n   * Status: Unstable\n   * Explanation: Safari may eventually support CSS Containment.\n   * Implication: This query may eventually target Safari.\n   * Works: From macoS Safari 9, iOS Safari 9 (start of Feature Query support),\n   *   Chrome 52, Edge 59, Firefox 69 (start of CSS Containment support).\n   * Monitor: https://caniuse.com/css-containment\n   */\n  @if $browser == \"not safari\" {\n    $query: \"contain: paint\";\n  }\n\n  /**\n   * Detects non-Chromium Edge, i.e. EdgeHTML or Edge before version 79.\n   *\n   * Status: Stable\n   * Explanation: `-ms-ime-align` is supported exclusively in pre-Chromium Edge.\n   *   See https://docs.microsoft.com/en-us/previous-versions/dn433242(v=vs.85)\n   */\n  @if $browser == \"edge not chromium\" or $browser == \"edgehtml\" or $browser == \"lt edge 79\" {\n    $query: \"-ms-ime-align: auto\";\n  }\n\n  /**\n   * Detects IE 10 and 11 by testing whether the user agent's vendor-specific\n   * contrast mode is either \"none\" or \"active\".\n   *\n   * Status: Stable\n   * Works: From IE 10 up to IE 11.\n   */\n  @if $browser == \"ie 11\" or $browser == \"gte ie 10\" {\n    $query: \"all and (-ms-high-contrast: none), (-ms-high-contrast: active)\";\n  }\n\n  /**\n   * Construct the final query.\n   */\n  @if $browser != \"ie 11\" and $browser != \"gte ie 10\" {\n    @supports (#{$query}) {\n      @content;\n    }\n  } @else if $browser == \"ie 11\" or $browser == \"gte ie 10\" {\n    @media #{$query} {\n      @content;\n    }\n  }\n}","@use \"../_all\" as *;\n\n/**\n * 1. Define the \"small\" size of the media area (e.g. image). By default, the\n *    media area will be 1/4th the width of the card. However, this variable\n *    will both be used as the minimum width of the media element for all cards,\n *    and the maximum width for cards with the `compact` modifier.\n */\n\n.Card {\n  display: grid;\n  position: relative;\n  \n  --card-media-small: 220px; // 1\n\n  /**\n   * Vertical orientation styles (applies by default, unless the \"horizontal\"\n   * modifier is explicitly set).\n   */\n  &:not(#{&}--horizontal) {\n    grid-template-columns: 1fr;\n    grid-template-rows: auto auto;\n    grid-template-areas:\n      \"media\"\n      \"body\";\n  }\n\n  /**\n   * Horizontal orientation styles.\n   */\n  @mixin horizontal-card {\n    grid-template-columns: var(--card-media-width, 1fr) 3fr;\n    grid-template-rows: 1fr;\n    grid-template-areas:\n      \"media body\";\n    --card-body-divider: none;\n  }\n\n  /**\n   * Apply horizontal orientation styles when the \"vertical\" modifier is not\n   * explicitly set and the card's outer container is sufficiently wide.\n   */\n  &:not(#{&}--vertical) {\n    @container (min-width: 600px) {\n      @include horizontal-card;\n    }\n  }\n\n  /**\n   * Also apply horizontal orientation styles when the \"horizontal\" modifier is\n   * explicitly set.\n   */\n  &--horizontal {\n    @include horizontal-card;\n  }\n\n  &--compact {\n    --card-media-width: var(--card-media-small);\n    --card-body-padding: #{space(\"loose\")};\n    --card-title-font-size: #{font-size(\"medium\", $responsive: true)};\n    --card-content-font-size: #{font-size(\"small\", $responsive: true)};\n\n    --button-background: transparent;\n    --button-text-color: #{theme-color(\"secondary\")};\n    --button-padding: 0;\n    --button-height: auto;\n    --button-overlay: none;\n  }\n\n  &--no-bg {\n    --card-body-background: transparent;\n  }\n\n  &--no-bg:not(#{&}--horizontal) {\n    @container (max-width: 599px) {\n      --card-body-padding-x: 0;\n    }\n  }\n\n  &--no-bg#{&}--vertical {\n    --card-body-padding-x: 0;\n  }\n\n  &--accent-divider {\n    --card-body-divider: #{space(\"tight\")} solid #{theme-color(\"primary\")};\n  }\n\n  &--contain-media {\n    --card-media-fit: contain;\n  }\n\n  &:focus-within {\n    @include focus-style;\n  }\n\n  &__media {\n    grid-area: media;\n    min-width: var(--card-media-small);\n\n    > img {\n      display: block;\n      width: 100%;\n      height: 100%;\n      object-fit: var(--card-media-fit, cover);\n      object-position: center;\n      overflow: hidden;\n    }\n  }\n\n  &__body {\n    grid-area: body;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    background-color: var(--card-body-background, #{color(\"gray\", \"0\")});\n    color: color(\"gray\", \"400\");\n    border-top: var(--card-body-divider, none);\n    padding:\n      var(--card-body-padding, #{space(\"x-loose\")})\n      var(--card-body-padding-x, var(--card-body-padding, #{space(\"x-loose\")}));\n  }\n\n  &__title {\n    @include font-size(\"medium-plus\", $custom-property: \"--card-title-font-size\");\n    font-weight: font-weight(\"semibold\");\n    color: inherit;\n    text-decoration: none;\n    margin-bottom: space(\"tight\", \"em\");\n\n    &:focus {\n      outline: none;\n    }\n\n    &[href]::before {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n    }\n  }\n\n  /**\n   * 1. Make other links in the card content clickable by raising it in the\n   *    stacking context.\n   * 2. Because the whole card surface is clickable, links within the card\n   *    should have a larger click target.\n   */\n\n  &__content {\n    @include font-size(\"medium\", $custom-property: \"--card-content-font-size\");\n    margin-bottom: space(\"loose\", \"em\");\n    \n    a {\n      position: relative; // 1\n      margin: -.5em; // 2\n      padding: .5em; // 2\n    }\n  }\n\n  &__footer {\n    display: flex;\n    margin-top: auto;\n    width: 100%;\n  }\n}",null,"@use \"../_all\" as *;\n\n/**\n * 1. Make padding add to the box's total dimensions, rather than pushing\n *    content inwards (as in `box-sizing: border-box`).\n * 2. Set the minimum height to 100% of the viewport height, minus top and\n *    bottom padding (so the total height isn't 100% plus padding). Then, if\n *    defined, subtract the height of the site's header, which will be added as\n *    top padding in [4].\n * 4. Set the top padding to the height of the site header (to be pulled up by\n *    the same amount in [5]), plus whatever additional top padding is\n *    specified.\n * 5. Pull the hero up with a negative top margin, by the height of the site\n *    header (so that the header overlays the hero).\n * 6. If the hero rotates between multiple background images, create a proper\n *    \"crossfade\" effect with a \"darken\" blend mode.\n */\n\n.Hero {\n  $hero-padding-bottom: 3rem;\n  $hero-padding-top: 3rem;\n  $hero-base-height: 65vh;\n\n  display: flex;\n  align-items: center;\n  background-size: cover;\n  background-position: center;\n  box-sizing: content-box; // 1\n  min-height: calc(\n    var(--hero-base-height, #{$hero-base-height})\n    - var(--hero-padding-top, #{$hero-padding-top})\n    - var(--hero-padding-bottom, #{$hero-padding-bottom})\n    - var(--site-header-height, 0px)\n  ); // 3\n  padding-top: calc(var(--site-header-height, 0px) + var(--hero-padding-top, #{$hero-padding-top})); // 4\n  padding-bottom: var(--hero-padding-bottom, #{$hero-padding-bottom});\n  margin-top: calc(var(--site-header-height, 0px) * -1); // 5\n  z-index: 1;\n  position: relative;\n  color: #fff;\n\n  &[data-background-images] {\n    background-blend-mode: darken; // 6\n    transition: background-image 3s;\n  }\n\n  &--full-height {\n    --hero-base-height: 100vh;\n  }\n  \n  /**\n   * Only allow parallax if reduced motion preference is not set.\n   */\n  @include motion-ok {\n    &--parallax {\n      background-attachment: fixed;\n    }\n  }\n\n  /**\n   * Increase contrast with the background image(s) by adding a darkened\n   * overlay.\n   */\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: -1;\n    background: color(\"shade\", \"200\");\n  }\n\n  &__headline {\n    @include font-size(\"xx-large\");\n    font-weight: font-weight(\"semibold\");\n    margin: 0;\n  }\n\n  &__tagline {\n    @include font-size(\"medium-plus\");\n    width: 50%;\n  }\n}","@use \"../_all\" as *;\n\n.Message {\n  --message-background-color: #{interface-color(\"neutral\", \"0\")};\n  --message-border-color: #{interface-color(\"neutral\")};\n  --message-text-color: #{interface-color(\"neutral\", \"400\")};\n\n  background-color: var(--message-background-color);\n  border-left: 4px solid var(--message-border-color);\n  color: var(--message-text-color);\n  padding: space(\"normal\") space(\"loose\");\n  margin: space(\"loose\") 0;\n\n  &--positive {\n    --message-background-color: #{interface-color(\"positive\", \"0\")};\n    --message-border-color: #{interface-color(\"positive\")};\n    --message-text-color: #{interface-color(\"positive\", \"400\")};\n  }\n\n  &--negative {\n    --message-background-color: #{interface-color(\"negative\", \"0\")};\n    --message-border-color: #{interface-color(\"negative\")};\n    --message-text-color: #{interface-color(\"negative\", \"400\")};\n  }\n\n  &--attention {\n    --message-background-color: #{interface-color(\"attention\", \"0\")};\n    --message-border-color: #{interface-color(\"attention\")};\n    --message-text-color: #{interface-color(\"attention\", \"400\")};\n  }\n\n  &--notice {\n    --message-background-color: #{interface-color(\"notice\", \"0\")};\n    --message-border-color: #{interface-color(\"notice\")};\n    --message-text-color: #{interface-color(\"notice\", \"400\")};\n  }\n\n  &--small {\n    font-size: font-size(\"small\");\n    padding: space(\"tight\") space(\"normal\");\n    margin: space(\"normal\") 0;\n  }\n}","@use \"../_all\" as *;\n\n/**\n * A utility class to visually hide an element while keeping it accessible to\n * screen readers. Note that if this class is applied to an interactive element,\n * and that element receives keyboard focus or a click/tap, it will become\n * visible for accessibility reasons.\n */\n.visually-hidden:not(:focus):not(:active) {\n  @include visually-hidden;\n}","@use \"../_all\" as *;\n\n.max-width {\n  margin: 0 auto;\n  width: calc(100% - space(\"x-loose\"));\n  max-width: breakpoint(\"x-large\");\n}\n\n.row {\n  display: flex;\n  flex-direction: row;\n}\n\n.column {\n  display: flex;\n  flex-direction: column;\n}\n\n.row-wrap,\n.column-wrap {\n  flex-wrap: wrap;\n}\n\n@for $flex from 1 through 12 {\n  .flex-#{$flex} {\n    flex: $flex;\n  }\n}\n\n.grid {\n  display: grid;\n  grid-template-columns: repeat(var(--grid-columns, 1), minmax(var(--grid-column-min-width, 0px), 1fr));\n}\n\n.justify-space-between {\n  justify-content: space-between;\n}\n\n.justify-start,\n.justify-left {\n  justify-content: start;\n}\n\n.justify-end,\n.justify-right {\n  justify-content: end;\n}\n\n.justify-center {\n  justify-content: center;\n}\n\n.align-center {\n  align-items: center;\n}\n\n.align-start,\n.align-top {\n  align-items: start;\n}\n\n.align-end,\n.align-bottom {\n  align-items: end;\n}\n\n.float-left {\n  margin: 0 auto space(\"loose\");\n\n  @include breakpoint-above(\"small\") {\n    float: left;\n    margin: 0 space(\"loose\") space(\"loose\") 0;\n  }\n}\n\n.float-right {\n  margin: 0 auto space(\"loose\");\n\n  @include breakpoint-above(\"small\") {\n    float: right;\n    margin: 0 0 space(\"loose\") space(\"loose\");\n  }\n}\n\n@each $space, $value in $spaces {\n  .gap-#{$space} {\n    gap: $value;\n  }\n\n  .row-gap-#{$space} {\n    row-gap: $value;\n  }\n\n  .column-gap-#{$space} {\n    column-gap: $value;\n  }\n}\n\n@each $breakpoint, $value in $breakpoints {\n  @include breakpoint-below($breakpoint) {\n    .hide-below-#{$breakpoint} {\n      display: none !important;\n    }\n  }\n\n  @include breakpoint-above($breakpoint) {\n    .hide-above-#{$breakpoint} {\n      display: none !important;\n    }\n  }\n}\n\n.is-self-responsive {\n  container-type: width;\n  width: 100%;\n}","@use \"sass:map\";\n@use \"_variables\" as *;\n@use \"_functions\" as *;\n\n@mixin breakpoint-above($breakpoint) {\n  @if map.has-key($breakpoints, $breakpoint) {\n    @media (min-width: breakpoint($breakpoint)) {\n      @content;\n    }\n  } @else {\n    @media (min-width: #{$breakpoint}) {\n      @content;\n    }\n  }\n}\n\n@mixin breakpoint-below($breakpoint) {\n  @if map.has-key($breakpoints, $breakpoint) {\n    @media (max-width: breakpoint($breakpoint)) {\n      @content;\n    }\n  } @else {\n    @media (max-width: #{$breakpoint}) {\n      @content;\n    }\n  }\n}","/**\n * Layout design tokens. Each token and its value is stored in a map. Note\n * that each map has a corresponding getter function (see _functions.scss) for\n * easier access. For example, rather than `map.get($sizes, \"small\")`,\n * you can simply use `size(\"small\")`.\n */\n\n/**\n * The global base unit. All layout-related measurements should be an even\n * multiple of this unit.\n */\n$base-unit: 4px;\n\n/**\n * Semantic sizes on a scale of x-small to x-large. Useful for setting widths\n * and heights at the component/element level (for instance to keep size\n * modifiers consistent across components). Not as useful for measurements of\n * larger-scale layouts, which should be flexible and use relative units rather\n * than absolute/static. For fixed, larger-scale layout measurements to use at\n * the macro level, consider breakpoint tokens instead.\n *\n * See: size()\n */\n$sizes: (\n  \"x-small\": $base-unit * 6,\n  \"small\":   $base-unit * 8,\n  \"medium\":  $base-unit * 10,\n  \"large\":   $base-unit * 12,\n  \"x-large\": $base-unit * 14,\n);\n\n/**\n * Semantic spaces on a scale of x-tight to x-loose. Useful for setting margin,\n * padding, gap, etc.\n *\n * See: space()\n */\n$spaces: (\n  \"x-tight\": $base-unit * 1,\n  \"tight\":   $base-unit * 2,\n  \"normal\":  $base-unit * 4,\n  \"loose\":   $base-unit * 6,\n  \"x-loose\": $base-unit * 8,\n);\n\n/**\n * Breakpoints on a scale of small to x-large. Useful for global coordination\n * between elements. However, it is generally recommended to set breakpoints on\n * a case-by-case basis according to works best for the element in question.\n * These are only intended to be optional starting points for when the exact\n * breakpoint doesn't necessarily matter.\n *\n * See: breakpoint()\n */\n$breakpoints: (\n  \"small\": 640px,\n  \"medium\": 768px,\n  \"large\": 1024px,\n  \"x-large\": 1280px,\n);\n\n/**\n * Layers for setting z-index. This is to help manage z-indices from a single\n * source of truth, to ensure elements layer over each other properly, and avoid\n * arbitrary escalation of z-index values. When a new entry is added here,\n * consider its relationship to the other elements listed and adjust each as\n * needed. For instance, a modal should be on top of a sticky header.\n *\n * Note that negative values, 1, and 2 are reserved. They are allowed to be used\n * anywhere and do not need to be systematized, as they are often only useful\n * for setting z-indices relative to the stacking context of the element in\n * question.\n *\n * See: layer()\n */\n$layers: (\n  \"modal\": 4,\n  \"sticky-header\": 3,\n);","@use \"sass:map\";\n@use \"../_all\" as *;\n\n/**\n * Utility classes for the color system.\n */\n\n/**\n * Define which color grades work as text and link colors for each grade when\n * used as a background color. For instance, a color of grade 0 used as a\n * background color works with the same color at grade 400 for its text, and\n * grade 300 for a link.\n */\n$grade-associations: (\n  \"0\": (\n    \"text\": \"400\",\n    \"link\": \"300\",\n  ),\n  \"100\": (\n    \"text\": \"400\",\n    \"link\": \"400\",\n  ),\n  \"200\": (\n    \"text\": \"500\",\n    \"link\": \"500\",\n  ),\n  \"300\": (\n    \"text\": \"0\",\n    \"link\": \"0\",\n  ),\n  \"400\": (\n    \"text\": \"0\",\n    \"link\": \"100\",\n  ),\n  \"500\": (\n    \"text\": \"100\",\n    \"link\": \"200\",\n  ),\n);\n\n/**\n * Generate utility classes for setting background, text, and link colors for\n * each theme color alias.\n */\n@each $theme-color, $grade-map in $theme-colors {\n  @each $grade, $value in $grade-map {\n    // Construct the class as `.bg-color-grade`, e.g. `.bg-primary-100`.\n    $selector: \".bg-#{$theme-color}-#{$grade}\";\n\n    // Unless the grade is 300 (the medium color), in which case, omit the grade\n    // suffix.\n    @if $grade == \"300\" {\n      $selector: \".bg-#{$theme-color}\";\n    }\n\n    // Select the generated class.\n    #{$selector} {\n      // Set the background color.\n      background-color: $value;\n      // Get the appropriate text color from the `$grade-map` above.\n      color: map.get($grade-map, map.get($grade-associations, $grade, \"text\"));\n    }\n\n    // Get the appropriate link color from the `$grade-map` above.\n    :where(#{$selector} a) {\n      color: theme-color(\"link\", map.get($grade-associations, $grade, \"link\"));\n    }\n  }\n}\n\n/**\n * Manually add basic, non-variablized color utilities.\n */\n\n.bg-white {\n  background-color: #fff;\n  color: color(\"gray\", \"400\");\n}\n\n.text-white {\n  color: #fff;\n}","@use \"sass:map\";\n\n/**\n * Color design tokens. Each token and its value is stored in a map. Note that\n * each map has a corresponding getter function (see _functions.scss) for easier\n * access. For example, rather than `map.get($colors, \"red\")`, you can simply\n * use `color(\"red\")`.\n */\n\n/**\n * Basic color dictionary. Grades indicate lightness (perceptual luminosity), on\n * a scale of 0 (lightest) to 500 (darkest), at increments of 100.\n *\n * See: color()\n */\n$colors: (\n  \"red\": (\n    \"0\": #fff6f6,\n    \"100\": #ffdada,\n    \"200\": #ff888b,\n    \"300\": #da2530,\n    \"400\": #93000f,\n    \"500\": #410003,\n  ),\n\n  \"blue\": (\n    \"0\": #f5f8ff,\n    \"100\": #d5e3ff,\n    \"200\": #71adff,\n    \"300\": #2d73bc,\n    \"400\": #004880,\n    \"500\": #001c37,\n  ),\n\n  \"green\": (\n    \"0\": #e3ffe8,\n    \"100\": #aff2bd,\n    \"200\": #4cc16e,\n    \"300\": #248142,\n    \"400\": #005322,\n    \"500\": #002109,\n  ),\n\n  \"yellow\": (\n    \"0\": #fff9d4,\n    \"100\": #fbe090,\n    \"200\": #c9a900,\n    \"300\": #886f24,\n    \"400\": #504400,\n    \"500\": #211b00,\n  ),\n\n  \"gray\": (\n    \"0\": #f8f8f9,\n    \"100\": #e2e2e7,\n    \"200\": #aaaab3,\n    \"300\": #707079,\n    \"400\": #464652,\n    \"500\": #1b1b1e,\n  ),\n\n  \"shade\": (\n    \"0\": hsl(0 0% 0% / 3%),\n    \"100\": hsl(0 0% 0% / 10%),\n    \"200\": hsl(0 0% 0% / 30%),\n    \"300\": hsl(0 0% 0% / 53.4%),\n    \"400\": hsl(0 0% 0% / 70%),\n    \"500\": hsl(0 0% 0% / 90%),\n  ),\n);\n\n/**\n * Interface aliases are keywords used to reference colors according to the role\n * they serve in a user interface.\n *\n * See: interface-color()\n */\n$interface-colors: (\n  \"positive\": map.get($colors, \"green\"),\n  \"negative\": map.get($colors, \"red\"),\n  \"attention\": map.get($colors, \"yellow\"),\n  \"notice\": map.get($colors, \"blue\"),\n  \"neutral\": map.get($colors, \"gray\"),\n);\n\n/**\n * Theme aliases are keywords used to reference colors according to the role\n * they serve in the theme and brand scheme. Default colors are set here, but\n * they are expected to be overridden on a site-by-site basis according to that\n * site's branding.\n *\n * See: theme-color()\n */\n$theme-color-primary: \"red\" !default;\n$theme-color-secondary: \"blue\" !default;\n$theme-color-tertiary: \"gray\" !default;\n$theme-color-link: \"blue\" !default;\n\n$theme-colors: (\n  \"primary\": map.get($colors, $theme-color-primary),\n  \"secondary\": map.get($colors, $theme-color-secondary),\n  \"tertiary\": map.get($colors, $theme-color-tertiary),\n  \"link\": map.get($colors, $theme-color-link),\n);","@use \"../_all\" as *;\n\n.text-center {\n  text-align: center;\n}\n\n@each $token, $value in $font-weights {\n  .text-#{$token} {\n    font-weight: $value;\n  }\n}\n\n@each $token, $value in $font-sizes {\n  .text-#{$token} {\n    @include font-size($token);\n  }\n}\n\n@each $token, $value in $font-stacks {\n  .font-#{$token} {\n    font-family: $value;\n  }\n}","/**\n * Typography design tokens. Each token and its value is stored in a map. Note\n * that each map has a corresponding getter function (see _functions.scss) for\n * easier access. For example, rather than `map.get($font-stacks, \"default\")`,\n * you can simply use `font-stack(\"default\")`.\n */\n\n/**\n * Semantic font stacks. These are first stored as configuration variables for\n * easier overriding on import (downstream use).\n *\n * See: font-stack()\n */\n$theme-font-default: (Inter, system-ui, sans-serif) !default;\n$theme-font-headings: (Inter, system-ui, sans-serif) !default;\n$theme-font-copy: (Inter, system-ui, sans-serif) !default;\n$theme-font-ui: (Inter, system-ui, sans-serif) !default;\n\n$font-stacks: (\n  \"default\": $theme-font-default,\n  \"headings\": $theme-font-headings,\n  \"copy\": $theme-font-copy,\n  \"ui\": $theme-font-ui,\n);\n\n/**\n * Semantic font sizes, on a scale of x-small to xx-large. In addition to a\n * getter function, there is also a mixin for generating responsive font sizes\n * based on the static values here (as well as automatically providing the\n * appropriate line-height).\n *\n * See: font-size()\n */\n$font-sizes: (\n  \"x-small\": .75rem,\n  \"small\": .875rem,\n  \"medium\": 1rem,\n  \"medium-plus\": 1.25rem,\n  \"large\": 1.5rem,\n  \"x-large\": 2rem,\n  \"xx-large\": 2.5rem,\n);\n\n/**\n * Font weights. These are stored as tokens in the event of a typeface change,\n * since exact numeric values depend on the type. For example, semibold can mean\n * 500 or 600 depending on the font.\n *\n * See: font-weight()\n */\n$font-weights: (\n  \"light\": 300,\n  \"normal\": 400,\n  \"semibold\": 600,\n  \"bold\": 700,\n);\n\n/**\n * Semantic line heights, on a scale of x-tight to x-loose. Generally, larger\n * text should have a tighter line height, medium text should have a looser line\n * height, and smaller text should have a medium line height.\n *\n * See: line-height()\n */\n$line-heights: (\n  \"x-tight\": 1,\n  \"tight\": 1.25,\n  \"normal\": 1.5,\n  \"loose\": 1.75,\n  \"x-loose\": 2,\n);"]}