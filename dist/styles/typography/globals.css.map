{"version":3,"sources":["typography/globals.scss","typography/_mixins.scss"],"names":[],"mappings":"AAEA,KACE,aAAA,CACA,sCAAA,CACA,cAAA,CAqBF,uDAEE,sCAAA,CAGF,+CAEE,eAAA,CAEA,2JACE,eAAA,CAIJ,4CAEE,iBAAA,CAGF,sBACE,eAAA,CAGF,OCpCE,gBAAA,CAKE,6CAAA,CAIA,gBAAA,CD8BF,eAAA,CACA,uBAAA,CACA,eAAA,CAGF,OC5CE,cAAA,CAKE,2CAAA,CAIA,gBAAA,CDsCF,eAAA,CACA,wBAAA,CAGF,OCnDE,gBAAA,CAKE,2CAAA,CAIA,gBAAA,CD6CF,eAAA,CACA,sBAAA,CAGF,OC1DE,iBAAA,CAKE,8CAAA,CAIA,gBAAA,CDoDF,eAAA,CACA,sBAAA,CAGF,OCjEE,cAAA,CAKE,yCAAA,CAQA,eAAA,CDuDF,eAAA,CACA,sBAAA,CAGF,OCxEE,iBAAA,CAKE,iBAAA,CAQA,eAAA,CD8DF,eAAA,CACA,sBAAA,CAaF,cAGE,eAAA,CACA,6BAAA,CAQF,UACE,aAAA,CACA,yBAAA,CACA,iCAAA,CAGF,kCAEE,aAAA,CAGF,EACE,eAAA,CACA,gBAAA,CAEA,aACE,eAAA","file":"globals.css","sourcesContent":["@use \"../_all\" as *;\n\nbody {\n  color: color(\"gray\", \"400\");\n  font-family: font-stack(\"default\");\n  font-size: font-size(\"medium\");\n}\n\n/**\n * Default heading styles.\n *\n * 1. Use `:where` pseduo-function to zero out the specificity and make the\n *    styles easier to override. Browser support lacks IE, Edge 87-, Firefox\n *    77-, Chrome 87-, Safari 13.7-, so only include styles in this ruleset that\n *    are not critical.\n * 2. Give a base vertical margin as a starting point (only give a top margin if\n *    the heading is not the first child).\n * 3. Add a much larger top margin to headings that are not directly under a\n *    heading one level higher.\n * 4. Not concerned with lowering the specificity of H1 styles, as there should\n *    only ever be one H1 on a page, and it should always look the same (if\n *    visible). By contrast, lower level headings may be used inside components,\n *    etc., and may require different styling while keeping the semantic\n *    meaning.\n */\n\n:where(h1, h2, h3, h4, h5, h6), // 1\n.h1, .h2, .h3, .h4, .h5, .h6 {\n  font-family: font-stack(\"headings\");\n}\n\n:where(h2, h3, h4, h5, h6), // 1\n.h2, .h3, .h4, .h5, .h6 {\n  margin: 0 0 1rem; // 2\n\n  &:not(:first-child) {\n    margin-top: 1rem; // 2\n  }\n}\n\n:where(:not(h1) + h2),\n:where(:not(h2) + h3) {\n  margin-top: 3.5rem; // 3\n}\n\n:where(:not(h3) + h4) {\n  margin-top: 2rem; // 3\n}\n\nh1,\n.h1 { // 4\n  @include font-size(\"xx-large\");\n  font-weight: font-weight(\"semibold\");\n  letter-spacing: -.025em;\n  margin: 0 0 2rem;\n}\n\nh2,\n.h2 {\n  @include font-size(\"x-large\");\n  font-weight: font-weight(\"normal\");\n  letter-spacing: -.0125em;\n}\n\nh3,\n.h3 {\n  @include font-size(\"large\");\n  font-weight: font-weight(\"normal\");\n  letter-spacing: .0125em;\n}\n\nh4,\n.h4 {\n  @include font-size(\"medium-plus\");\n  font-weight: font-weight(\"normal\");\n  letter-spacing: .0125em;\n}\n\nh5,\n.h5 {\n  @include font-size(\"medium\");\n  font-weight: font-weight(\"bold\");\n  letter-spacing: .0125em;\n}\n\nh6,\n.h6 {\n  @include font-size(\"small\");\n  font-weight: font-weight(\"bold\");\n  letter-spacing: .0125em;\n}\n\n/**\n * Styles for elements that make text smaller relative to the element's parent\n * font size.\n *\n * 1. Fallback/base style. Makes these elements' font size 87.5% of the parent\n *    font size.\n * 2. If supported, do not allow the font size to go below the absolute\n *    acceptable minimum font size (`x-small`).\n */\n\nsmall,\nsub,\nsup {\n  font-size: 87.5%; // 1\n  font-size: max(#{font-size(\"x-small\"), 87.5%}); // 2\n}\n\n/**\n * 1. Use `:where` pseduo-function to zero out the specificity and make the\n *    styles easier to override. Note that browsers that do not support `:where`\n *    will use the default browser link styles.\n */\n:where(a) {\n  color: theme-color(\"link\");\n  text-decoration: underline;\n  transition: color animation(\"productive\");\n}\n\n:where(a:hover),\n:where(a:visited) {\n  color: theme-color(\"link\", \"400\");\n}\n\np {\n  margin: 0 0 space(\"normal\", \"rem\");\n  line-height: line-height(\"loose\");\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n}","@use \"sass:string\";\n@use \"_variables\" as *;\n@use \"_functions\" as *;\n\n/**\n * A mixin for generating responsive font sizes and automatically providing the\n * appropriate line-height based on the font-size.\n *\n * 1. A static fallback for browsers that do not support `clamp`.\n * 2. Set a tight line-height for font sizes xx-large through medium-plus.\n * 3. Set a normal line-height for font sizes medium through x-small.\n */\n@mixin font-size($font-size, $responsive: true, $custom-property: false) {\n  font-size: font-size($font-size); // 1\n\n  @if $custom-property {\n    font-size: var(#{string.unquote($custom-property)}, #{font-size($font-size, $responsive: true)});\n  } @else {\n    font-size: font-size($font-size, $responsive: true);\n  }\n\n  @if index((\"xx-large\", \"x-large\", \"large\", \"medium-plus\"), $font-size) {\n    line-height: line-height(\"tight\"); // 2\n  }\n\n  @if index((\"medium\", \"small\", \"x-small\"), $font-size) {\n    line-height: line-height(\"normal\"); // 3\n  }\n} "]}