@use "sass:map";

/**
 * Color design tokens. Each token and its value is stored in a map. Note that
 * each map has a corresponding getter function (see _functions.scss) for easier
 * access. For example, rather than `map.get($colors, "red")`, you can simply
 * use `color("red")`.
 */

/**
 * Basic color dictionary. Grades indicate lightness (perceptual luminosity), on
 * a scale of 0 (lightest) to 500 (darkest), at increments of 100.
 *
 * See: color()
 */
$colors: (
  "red": (
    "0": #fff6f6,
    "100": #ffdada,
    "200": #ff888b,
    "300": #da2530,
    "400": #93000f,
    "500": #410003,
  ),
  "blue": (
    "0": #f5f8ff,
    "100": #d5e3ff,
    "200": #71adff,
    "300": #2d73bc,
    "400": #004880,
    "500": #001c37,
  ),
  "green": (
    "0": #e3ffe8,
    "100": #aff2bd,
    "200": #4cc16e,
    "300": #248142,
    "400": #005322,
    "500": #002109,
  ),
  "yellow": (
    "0": #fff9d4,
    "100": #fbe090,
    "200": #c9a900,
    "300": #886f24,
    "400": #504400,
    "500": #211b00,
  ),
  "purple": (
    "0": #f9f7ff,
    "100": #e7defb,
    "200": #ba9cf2,
    "300": #8f4ae6,
    "400": #5f23a2,
    "500": #280a48,
  ),
  "gray": (
    "0": #f8f8f9,
    "100": #e2e2e7,
    "200": #aaaab3,
    "300": #707079,
    "400": #464652,
    "500": #1b1b1e,
  ),
  "shade": (
    "0": hsl(0deg 0% 0% / 3%),
    "100": hsl(0deg 0% 0% / 10%),
    "200": hsl(0deg 0% 0% / 30%),
    "300": hsl(0deg 0% 0% / 53.4%),
    "400": hsl(0deg 0% 0% / 70%),
    "500": hsl(0deg 0% 0% / 90%),
  ),
);

/**
 * Interface aliases are keywords used to reference colors according to the role
 * they serve in a user interface.
 *
 * See: interface-color()
 */
$interface-colors: (
  "positive": map.get($colors, "green"),
  "negative": map.get($colors, "red"),
  "attention": map.get($colors, "yellow"),
  "notice": map.get($colors, "blue"),
  "neutral": map.get($colors, "gray"),
);

/**
 * Theme aliases are keywords used to reference colors according to the role
 * they serve in the theme and brand scheme. Default colors are set here, but
 * they are expected to be overridden on a site-by-site basis according to that
 * site's branding.
 *
 * See: theme-color()
 */
$theme-color-primary: "red" !default;
$theme-color-secondary: "blue" !default;
$theme-color-tertiary: "gray" !default;
$theme-color-link: "blue" !default;
$theme-colors: (
  "primary": map.get($colors, $theme-color-primary),
  "secondary": map.get($colors, $theme-color-secondary),
  "tertiary": map.get($colors, $theme-color-tertiary),
  "link": map.get($colors, $theme-color-link),
);
