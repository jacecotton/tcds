/**
 * Layout design tokens. Each token and its value is stored in a map. Note
 * that each map has a corresponding getter function (see _functions.scss) for
 * easier access. For example, rather than `map.get($sizes, "small")`,
 * you can simply use `size("small")`.
 */

/**
 * The global base unit. All layout-related measurements should be an even
 * multiple of this unit.
 */
$theme-base-unit: 4px !default;
$base-unit: $theme-base-unit;

/**
 * Semantic sizes on a scale of x-small to x-large. Useful for setting widths
 * and heights at the component/element level (for instance to keep size
 * modifiers consistent across components). Not as useful for measurements of
 * larger-scale layouts, which should be flexible and use relative units rather
 * than absolute/static. For fixed, larger-scale layout measurements to use at
 * the macro level, consider breakpoint tokens instead.
 *
 * See: size()
 */
$theme-size-multiplier-x-small: 6 !default;
$theme-size-multiplier-small: 8 !default;
$theme-size-multiplier-medium: 10 !default;
$theme-size-multiplier-large: 12 !default;
$theme-size-multiplier-x-large: 14 !default;

$sizes: (
  "x-small": $base-unit * $theme-size-multiplier-x-small,
  "small":   $base-unit * $theme-size-multiplier-small,
  "medium":  $base-unit * $theme-size-multiplier-medium,
  "large":   $base-unit * $theme-size-multiplier-large,
  "x-large": $base-unit * $theme-size-multiplier-x-large,
);

/**
 * Semantic spaces on a scale of x-tight to x-loose. Useful for setting margin,
 * padding, gap, etc.
 *
 * See: space()
 */

$theme-space-multiplier-x-tight: 1 !default;
$theme-space-multiplier-tight: 2 !default;
$theme-space-multiplier-normal: 4 !default;
$theme-space-multiplier-loose: 6 !default;
$theme-space-multiplier-x-loose: 8 !default;

$spaces: (
  "x-tight": $base-unit * $theme-space-multiplier-x-tight,
  "tight":   $base-unit * $theme-space-multiplier-tight,
  "normal":  $base-unit * $theme-space-multiplier-normal,
  "loose":   $base-unit * $theme-space-multiplier-loose,
  "x-loose": $base-unit * $theme-space-multiplier-x-loose,
);

/**
 * Breakpoints on a scale of small to x-large. Useful for global coordination
 * between elements. However, it is generally recommended to set breakpoints on
 * a case-by-case basis according to works best for the element in question.
 * These are only intended to be optional starting points for when the exact
 * breakpoint doesn't necessarily matter.
 *
 * See: breakpoint()
 */
$theme-breakpoint-small: 640px !default;
$theme-breakpoint-medium: 768px !default;
$theme-breakpoint-large: 1024px !default;
$theme-breakpoint-x-large: 1280px !default;

$breakpoints: (
  "small": $theme-breakpoint-small,
  "medium": $theme-breakpoint-medium,
  "large": $theme-breakpoint-large,
  "x-large": $theme-breakpoint-x-large,
);

/**
 * Layers for setting z-index. This is to help manage z-indices from a single
 * source of truth, to ensure elements layer over each other properly, and avoid
 * arbitrary escalation of z-index values. When a new entry is added here,
 * consider its relationship to the other elements listed and adjust each as
 * needed. For instance, a modal should be on top of a sticky header.
 *
 * Note that negative values, 1, and 2 are reserved. They are allowed to be used
 * anywhere and do not need to be systematized, as they are often only useful
 * for setting z-indices relative to the stacking context of and within the
 * element in question.
 *
 * See: layer()
 */

$layers: (
  "dialog": 5,
  "notification": 4,
  "site-header": 3,
);
