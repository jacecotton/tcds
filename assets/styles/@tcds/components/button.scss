@use "@tcds" as *;

/**
 * 1. These properties are variablized because they're used in the calculation
 *    of other properties. For instance, the `padding` property shouldn't be
 *    changed outright, because the value is used in the calculation of
 *    `margin-right` of button icons.
 * 2. Since button labels never wrap, we can remove line height to trim excess
 *    vertical space and make padding more exact.
 * 3. Vertical padding is not added because button height is explicitly set,
 *    then its contents are vertically centered.
 * 4. Clip overlays (icons and hover state) when corners are rounded.
 * 5. Contain absolute-positioned elements (icon and hover overlays).
 * 6. For link buttons.
 */

.Button {
  --button-padding: #{space("normal", "em")}; // 1
  --button-height: #{size("medium")}; // 1

  @include font-size("medium", $line-height: false);

  display: inline-flex;
  align-items: center;
  background-color: theme-color("primary");
  color: theme-color("primary", "0");
  font-family: font-stack("ui");
  font-weight: font-weight("semibold");
  line-height: 1; // 2
  white-space: nowrap; // 2
  height: var(--button-height);
  padding: 0 var(--button-padding); // 3
  overflow: hidden; // 4
  position: relative; // 5
  text-decoration: none; // 6
  cursor: pointer;
  transform: scale(var(--button-scale, 1)) translate(var(--button-translate, 0, 0));
  transition: transform animation("productive");
  user-select: none;
  z-index: 1;

  /** States */

  &:hover {
    --button-overlay: #{color("shade", "100")};
  }

  &:active {
    --button-overlay: #{color("shade", "200")};
    --button-scale: 0.99;
  }

  &:focus-visible {
    @include focus-style;
  }

  /** Modifiers */

  &--small {
    @include font-size("small", $line-height: false);

    @media (pointer: fine) {
      --button-height: #{size("small")};
    }
  }

  &--large {
    --button-height: #{size("large")};

    @include font-size("medium-plus", $line-height: false);
  }

  &--full-width {
    display: flex;
    justify-content: center;
    width: 100%;
  }

  &--round {
    border-radius: var(--button-height);
  }

  &--ghost {
    background-color: transparent;
    color: inherit;

    --button-icon-background: transparent;
  }

  &--ghost#{&}--icon-right {
    --button-icon-margin-left: 0;
  }

  &--ghost:not(#{&}--icon-right) {
    --button-icon-margin-right: 0;
  }

  &--icon-right {
    flex-direction: row-reverse;

    --button-icon-margin-right: calc(var(--button-padding) * -1);
    --button-icon-margin-left: var(--button-padding);
  }

  &--icon-only {
    padding: 0;

    --button-icon-background: transparent;
    --button-icon-margin-right: 0;
    --button-icon-margin-left: 0;
  }

  &--icon-inline {
    --button-icon-background: transparent;
    --button-icon-height: 1em;
    --button-icon-margin-right: 0.5em;
    --button-icon-margin-left: 0;
    --button-icon-padding: 0;
  }

  &--icon-inline#{&}--icon-right {
    --button-icon-margin-right: 0;
    --button-icon-margin-left: 0.5em;
  }

  /** Children */

  &::after {
    display: block;
    content: "";
    background-color: var(--button-overlay, transparent);
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    transition: background-color animation("productive");
    z-index: -1;
  }

  svg {
    background-color: var(--button-icon-background, #{color("shade", "100")});
    height: var(--button-icon-height, 100%);
    margin:
      0 var(--button-icon-margin-right, var(--button-padding))
      0 var(--button-icon-margin-left, calc(var(--button-padding) * -1));
    padding: var(--button-icon-padding, calc(var(--button-padding) * 0.6));
  }
}
